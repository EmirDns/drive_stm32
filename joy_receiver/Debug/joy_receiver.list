
joy_receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08004f58  08004f58  00014f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005094  08005094  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005094  08005094  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005094  08005094  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005094  08005094  00015094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005098  08005098  00015098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800509c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000001f8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000268  20000268  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000108eb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000203a  00000000  00000000  0003098b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d10  00000000  00000000  000329c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c58  00000000  00000000  000336d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000207ad  00000000  00000000  00034330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010790  00000000  00000000  00054add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c94af  00000000  00000000  0006526d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012e71c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037d8  00000000  00000000  0012e770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004f40 	.word	0x08004f40

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08004f40 	.word	0x08004f40

080001d4 <readString>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void readString(void){
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	static int receive_counter=0;
	static int receive_flag=0;
	if(incoming_byte[0]=='S'){
 80001d8:	4b16      	ldr	r3, [pc, #88]	; (8000234 <readString+0x60>)
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	2b53      	cmp	r3, #83	; 0x53
 80001de:	d102      	bne.n	80001e6 <readString+0x12>
		receive_flag=1;
 80001e0:	4b15      	ldr	r3, [pc, #84]	; (8000238 <readString+0x64>)
 80001e2:	2201      	movs	r2, #1
 80001e4:	601a      	str	r2, [r3, #0]
	}
	if(receive_flag && incoming_byte[0]!='S' && incoming_byte[0]!='F'){
 80001e6:	4b14      	ldr	r3, [pc, #80]	; (8000238 <readString+0x64>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d012      	beq.n	8000214 <readString+0x40>
 80001ee:	4b11      	ldr	r3, [pc, #68]	; (8000234 <readString+0x60>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	2b53      	cmp	r3, #83	; 0x53
 80001f4:	d00e      	beq.n	8000214 <readString+0x40>
 80001f6:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <readString+0x60>)
 80001f8:	781b      	ldrb	r3, [r3, #0]
 80001fa:	2b46      	cmp	r3, #70	; 0x46
 80001fc:	d00a      	beq.n	8000214 <readString+0x40>
		pwm_string[receive_counter]=incoming_byte[0];
 80001fe:	4b0f      	ldr	r3, [pc, #60]	; (800023c <readString+0x68>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a0c      	ldr	r2, [pc, #48]	; (8000234 <readString+0x60>)
 8000204:	7811      	ldrb	r1, [r2, #0]
 8000206:	4a0e      	ldr	r2, [pc, #56]	; (8000240 <readString+0x6c>)
 8000208:	54d1      	strb	r1, [r2, r3]
		receive_counter++;
 800020a:	4b0c      	ldr	r3, [pc, #48]	; (800023c <readString+0x68>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	3301      	adds	r3, #1
 8000210:	4a0a      	ldr	r2, [pc, #40]	; (800023c <readString+0x68>)
 8000212:	6013      	str	r3, [r2, #0]
	}
	if(incoming_byte[0]=='F'){
 8000214:	4b07      	ldr	r3, [pc, #28]	; (8000234 <readString+0x60>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	2b46      	cmp	r3, #70	; 0x46
 800021a:	d105      	bne.n	8000228 <readString+0x54>
		receive_flag=0;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <readString+0x64>)
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
		receive_counter=0;
 8000222:	4b06      	ldr	r3, [pc, #24]	; (800023c <readString+0x68>)
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
	}
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	20000164 	.word	0x20000164
 8000238:	2000008c 	.word	0x2000008c
 800023c:	20000090 	.word	0x20000090
 8000240:	20000250 	.word	0x20000250

08000244 <getDirection>:

void getDirection(void){
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
	for(int i=0;i<ARRAY_LEN;i++){
 800024a:	2300      	movs	r3, #0
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	e00b      	b.n	8000268 <getDirection+0x24>
		direction_array[i]=pwm_string[4*i];
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	009b      	lsls	r3, r3, #2
 8000254:	4a09      	ldr	r2, [pc, #36]	; (800027c <getDirection+0x38>)
 8000256:	5cd1      	ldrb	r1, [r2, r3]
 8000258:	4a09      	ldr	r2, [pc, #36]	; (8000280 <getDirection+0x3c>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	4413      	add	r3, r2
 800025e:	460a      	mov	r2, r1
 8000260:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<ARRAY_LEN;i++){
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	3301      	adds	r3, #1
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2b03      	cmp	r3, #3
 800026c:	ddf0      	ble.n	8000250 <getDirection+0xc>
	}
}
 800026e:	bf00      	nop
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr
 800027c:	20000250 	.word	0x20000250
 8000280:	20000260 	.word	0x20000260

08000284 <getPWM>:

void getPWM(void){
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
	char str_buffer[3];
	for(int i=0;i<ARRAY_LEN;i++){
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
 800028e:	e020      	b.n	80002d2 <getPWM+0x4e>
		for(int j=0;j<3;j++){
 8000290:	2300      	movs	r3, #0
 8000292:	60bb      	str	r3, [r7, #8]
 8000294:	e00c      	b.n	80002b0 <getPWM+0x2c>
			str_buffer[j]=pwm_string[(4*j)+1];
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	3301      	adds	r3, #1
 800029c:	4a11      	ldr	r2, [pc, #68]	; (80002e4 <getPWM+0x60>)
 800029e:	5cd1      	ldrb	r1, [r2, r3]
 80002a0:	1d3a      	adds	r2, r7, #4
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	4413      	add	r3, r2
 80002a6:	460a      	mov	r2, r1
 80002a8:	701a      	strb	r2, [r3, #0]
		for(int j=0;j<3;j++){
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	3301      	adds	r3, #1
 80002ae:	60bb      	str	r3, [r7, #8]
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	2b02      	cmp	r3, #2
 80002b4:	ddef      	ble.n	8000296 <getPWM+0x12>
		}
		pwm_array[i]=atoi(str_buffer);
 80002b6:	1d3b      	adds	r3, r7, #4
 80002b8:	4618      	mov	r0, r3
 80002ba:	f004 fd6e 	bl	8004d9a <atoi>
 80002be:	4603      	mov	r3, r0
 80002c0:	b2d9      	uxtb	r1, r3
 80002c2:	4a09      	ldr	r2, [pc, #36]	; (80002e8 <getPWM+0x64>)
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	4413      	add	r3, r2
 80002c8:	460a      	mov	r2, r1
 80002ca:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<ARRAY_LEN;i++){
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	3301      	adds	r3, #1
 80002d0:	60fb      	str	r3, [r7, #12]
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	2b03      	cmp	r3, #3
 80002d6:	dddb      	ble.n	8000290 <getPWM+0xc>
	}
}
 80002d8:	bf00      	nop
 80002da:	bf00      	nop
 80002dc:	3710      	adds	r7, #16
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	20000250 	.word	0x20000250
 80002e8:	200001b4 	.word	0x200001b4

080002ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART3){
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a06      	ldr	r2, [pc, #24]	; (8000314 <HAL_UART_RxCpltCallback+0x28>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d106      	bne.n	800030c <HAL_UART_RxCpltCallback+0x20>
		HAL_UART_Receive_IT(&huart3, (uint8_t*)incoming_byte, 1);
 80002fe:	2201      	movs	r2, #1
 8000300:	4905      	ldr	r1, [pc, #20]	; (8000318 <HAL_UART_RxCpltCallback+0x2c>)
 8000302:	4806      	ldr	r0, [pc, #24]	; (800031c <HAL_UART_RxCpltCallback+0x30>)
 8000304:	f003 fbc2 	bl	8003a8c <HAL_UART_Receive_IT>
		readString();
 8000308:	f7ff ff64 	bl	80001d4 <readString>
	}
}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40004800 	.word	0x40004800
 8000318:	20000164 	.word	0x20000164
 800031c:	200000e0 	.word	0x200000e0

08000320 <returnTimer>:

TIM_HandleTypeDef returnTimer(uint8_t timerNumber){
 8000320:	b580      	push	{r7, lr}
 8000322:	b096      	sub	sp, #88	; 0x58
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	460b      	mov	r3, r1
 800032a:	70fb      	strb	r3, [r7, #3]
	TIM_HandleTypeDef myTimer;
	if(timerNumber==1){
 800032c:	78fb      	ldrb	r3, [r7, #3]
 800032e:	2b01      	cmp	r3, #1
 8000330:	d107      	bne.n	8000342 <returnTimer+0x22>
		myTimer=htim1;
 8000332:	4a1a      	ldr	r2, [pc, #104]	; (800039c <returnTimer+0x7c>)
 8000334:	f107 030c 	add.w	r3, r7, #12
 8000338:	4611      	mov	r1, r2
 800033a:	224c      	movs	r2, #76	; 0x4c
 800033c:	4618      	mov	r0, r3
 800033e:	f004 fd5b 	bl	8004df8 <memcpy>
	}
	if(timerNumber==2){
 8000342:	78fb      	ldrb	r3, [r7, #3]
 8000344:	2b02      	cmp	r3, #2
 8000346:	d107      	bne.n	8000358 <returnTimer+0x38>
			myTimer=htim2;
 8000348:	4a15      	ldr	r2, [pc, #84]	; (80003a0 <returnTimer+0x80>)
 800034a:	f107 030c 	add.w	r3, r7, #12
 800034e:	4611      	mov	r1, r2
 8000350:	224c      	movs	r2, #76	; 0x4c
 8000352:	4618      	mov	r0, r3
 8000354:	f004 fd50 	bl	8004df8 <memcpy>
	}
	if(timerNumber==3){
 8000358:	78fb      	ldrb	r3, [r7, #3]
 800035a:	2b03      	cmp	r3, #3
 800035c:	d107      	bne.n	800036e <returnTimer+0x4e>
		myTimer=htim3;
 800035e:	4a11      	ldr	r2, [pc, #68]	; (80003a4 <returnTimer+0x84>)
 8000360:	f107 030c 	add.w	r3, r7, #12
 8000364:	4611      	mov	r1, r2
 8000366:	224c      	movs	r2, #76	; 0x4c
 8000368:	4618      	mov	r0, r3
 800036a:	f004 fd45 	bl	8004df8 <memcpy>
	}
	if(timerNumber==4){
 800036e:	78fb      	ldrb	r3, [r7, #3]
 8000370:	2b04      	cmp	r3, #4
 8000372:	d107      	bne.n	8000384 <returnTimer+0x64>
		myTimer=htim4;
 8000374:	4a0c      	ldr	r2, [pc, #48]	; (80003a8 <returnTimer+0x88>)
 8000376:	f107 030c 	add.w	r3, r7, #12
 800037a:	4611      	mov	r1, r2
 800037c:	224c      	movs	r2, #76	; 0x4c
 800037e:	4618      	mov	r0, r3
 8000380:	f004 fd3a 	bl	8004df8 <memcpy>
	}
	return myTimer;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4618      	mov	r0, r3
 8000388:	f107 030c 	add.w	r3, r7, #12
 800038c:	224c      	movs	r2, #76	; 0x4c
 800038e:	4619      	mov	r1, r3
 8000390:	f004 fd32 	bl	8004df8 <memcpy>
}
 8000394:	6878      	ldr	r0, [r7, #4]
 8000396:	3758      	adds	r7, #88	; 0x58
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	200001b8 	.word	0x200001b8
 80003a0:	20000204 	.word	0x20000204
 80003a4:	20000168 	.word	0x20000168
 80003a8:	20000094 	.word	0x20000094

080003ac <runMotor>:

void runMotor(TIM_HandleTypeDef myTimer, uint8_t direction, uint8_t pwmPulse){
 80003ac:	b084      	sub	sp, #16
 80003ae:	b490      	push	{r4, r7}
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	f107 0408 	add.w	r4, r7, #8
 80003b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if(direction==0){
 80003ba:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d110      	bne.n	80003e4 <runMotor+0x38>
		__HAL_TIM_SET_COMPARE(&myTimer, TIM_CHANNEL_2, (1500-(500*pwmPulse/255)));
 80003c2:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80003c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003ca:	fb02 f303 	mul.w	r3, r2, r3
 80003ce:	4a12      	ldr	r2, [pc, #72]	; (8000418 <runMotor+0x6c>)
 80003d0:	fb82 1203 	smull	r1, r2, r2, r3
 80003d4:	441a      	add	r2, r3
 80003d6:	11d2      	asrs	r2, r2, #7
 80003d8:	17db      	asrs	r3, r3, #31
 80003da:	1a9b      	subs	r3, r3, r2
 80003dc:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	639a      	str	r2, [r3, #56]	; 0x38
	}
	if(direction==1){
 80003e4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d110      	bne.n	800040e <runMotor+0x62>
		__HAL_TIM_SET_COMPARE(&myTimer, TIM_CHANNEL_2, (1500+(500*pwmPulse/255)));
 80003ec:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80003f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003f4:	fb02 f303 	mul.w	r3, r2, r3
 80003f8:	4a07      	ldr	r2, [pc, #28]	; (8000418 <runMotor+0x6c>)
 80003fa:	fb82 1203 	smull	r1, r2, r2, r3
 80003fe:	441a      	add	r2, r3
 8000400:	11d2      	asrs	r2, r2, #7
 8000402:	17db      	asrs	r3, r3, #31
 8000404:	1ad3      	subs	r3, r2, r3
 8000406:	f203 52dc 	addw	r2, r3, #1500	; 0x5dc
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	639a      	str	r2, [r3, #56]	; 0x38
	}
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	bc90      	pop	{r4, r7}
 8000414:	b004      	add	sp, #16
 8000416:	4770      	bx	lr
 8000418:	80808081 	.word	0x80808081

0800041c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800041c:	b5b0      	push	{r4, r5, r7, lr}
 800041e:	b0a6      	sub	sp, #152	; 0x98
 8000420:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000422:	f000 fcaf 	bl	8000d84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000426:	f000 f863 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800042a:	f000 fa95 	bl	8000958 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800042e:	f000 fa63 	bl	80008f8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000432:	f000 f953 	bl	80006dc <MX_TIM2_Init>
  MX_TIM1_Init();
 8000436:	f000 f8c1 	bl	80005bc <MX_TIM1_Init>
  MX_TIM3_Init();
 800043a:	f000 f9a9 	bl	8000790 <MX_TIM3_Init>
  MX_TIM4_Init();
 800043e:	f000 fa01 	bl	8000844 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t*)incoming_byte, 1);
 8000442:	2201      	movs	r2, #1
 8000444:	4922      	ldr	r1, [pc, #136]	; (80004d0 <main+0xb4>)
 8000446:	4823      	ldr	r0, [pc, #140]	; (80004d4 <main+0xb8>)
 8000448:	f003 fb20 	bl	8003a8c <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800044c:	2104      	movs	r1, #4
 800044e:	4822      	ldr	r0, [pc, #136]	; (80004d8 <main+0xbc>)
 8000450:	f002 fbd2 	bl	8002bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000454:	2104      	movs	r1, #4
 8000456:	4821      	ldr	r0, [pc, #132]	; (80004dc <main+0xc0>)
 8000458:	f002 fbce 	bl	8002bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800045c:	2104      	movs	r1, #4
 800045e:	4820      	ldr	r0, [pc, #128]	; (80004e0 <main+0xc4>)
 8000460:	f002 fbca 	bl	8002bf8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000464:	2104      	movs	r1, #4
 8000466:	481f      	ldr	r0, [pc, #124]	; (80004e4 <main+0xc8>)
 8000468:	f002 fbc6 	bl	8002bf8 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	getDirection();
 800046c:	f7ff feea 	bl	8000244 <getDirection>
	getPWM();
 8000470:	f7ff ff08 	bl	8000284 <getPWM>

	for(int i=0;i<ARRAY_LEN;i++){
 8000474:	2300      	movs	r3, #0
 8000476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000478:	e026      	b.n	80004c8 <main+0xac>
		runMotor(returnTimer(i+1), direction_array[i], pwm_array[i]);
 800047a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800047c:	b2db      	uxtb	r3, r3
 800047e:	3301      	adds	r3, #1
 8000480:	b2da      	uxtb	r2, r3
 8000482:	463b      	mov	r3, r7
 8000484:	4611      	mov	r1, r2
 8000486:	4618      	mov	r0, r3
 8000488:	f7ff ff4a 	bl	8000320 <returnTimer>
 800048c:	4a16      	ldr	r2, [pc, #88]	; (80004e8 <main+0xcc>)
 800048e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000490:	4413      	add	r3, r2
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	4915      	ldr	r1, [pc, #84]	; (80004ec <main+0xd0>)
 8000496:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000498:	440a      	add	r2, r1
 800049a:	7812      	ldrb	r2, [r2, #0]
 800049c:	9210      	str	r2, [sp, #64]	; 0x40
 800049e:	930f      	str	r3, [sp, #60]	; 0x3c
 80004a0:	466d      	mov	r5, sp
 80004a2:	f107 0410 	add.w	r4, r7, #16
 80004a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80004b2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80004b6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80004ba:	463b      	mov	r3, r7
 80004bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004be:	f7ff ff75 	bl	80003ac <runMotor>
	for(int i=0;i<ARRAY_LEN;i++){
 80004c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004c4:	3301      	adds	r3, #1
 80004c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80004c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004ca:	2b03      	cmp	r3, #3
 80004cc:	ddd5      	ble.n	800047a <main+0x5e>
	getDirection();
 80004ce:	e7cd      	b.n	800046c <main+0x50>
 80004d0:	20000164 	.word	0x20000164
 80004d4:	200000e0 	.word	0x200000e0
 80004d8:	200001b8 	.word	0x200001b8
 80004dc:	20000204 	.word	0x20000204
 80004e0:	20000168 	.word	0x20000168
 80004e4:	20000094 	.word	0x20000094
 80004e8:	20000260 	.word	0x20000260
 80004ec:	200001b4 	.word	0x200001b4

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b0a6      	sub	sp, #152	; 0x98
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80004fa:	2228      	movs	r2, #40	; 0x28
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f004 fc88 	bl	8004e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	2258      	movs	r2, #88	; 0x58
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f004 fc7a 	bl	8004e14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000520:	2302      	movs	r3, #2
 8000522:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000524:	2301      	movs	r3, #1
 8000526:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000528:	2310      	movs	r3, #16
 800052a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052e:	2302      	movs	r3, #2
 8000530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000538:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800053c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000540:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000544:	2300      	movs	r3, #0
 8000546:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800054e:	4618      	mov	r0, r3
 8000550:	f000 ff90 	bl	8001474 <HAL_RCC_OscConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800055a:	f000 fa2d 	bl	80009b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055e:	230f      	movs	r3, #15
 8000560:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000562:	2302      	movs	r3, #2
 8000564:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000566:	2380      	movs	r3, #128	; 0x80
 8000568:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000572:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000576:	2101      	movs	r1, #1
 8000578:	4618      	mov	r0, r3
 800057a:	f001 fe91 	bl	80022a0 <HAL_RCC_ClockConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000584:	f000 fa18 	bl	80009b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_TIM1
 8000588:	4b0b      	ldr	r3, [pc, #44]	; (80005b8 <SystemClock_Config+0xc8>)
 800058a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000590:	2300      	movs	r3, #0
 8000592:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000594:	2300      	movs	r3, #0
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000598:	2300      	movs	r3, #0
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	4618      	mov	r0, r3
 80005a0:	f002 f8b4 	bl	800270c <HAL_RCCEx_PeriphCLKConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005aa:	f000 fa05 	bl	80009b8 <Error_Handler>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3798      	adds	r7, #152	; 0x98
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	00301004 	.word	0x00301004

080005bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b096      	sub	sp, #88	; 0x58
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]
 80005de:	615a      	str	r2, [r3, #20]
 80005e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	222c      	movs	r2, #44	; 0x2c
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f004 fc13 	bl	8004e14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005ee:	4b39      	ldr	r3, [pc, #228]	; (80006d4 <MX_TIM1_Init+0x118>)
 80005f0:	4a39      	ldr	r2, [pc, #228]	; (80006d8 <MX_TIM1_Init+0x11c>)
 80005f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <MX_TIM1_Init+0x118>)
 80005f6:	2223      	movs	r2, #35	; 0x23
 80005f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005fa:	4b36      	ldr	r3, [pc, #216]	; (80006d4 <MX_TIM1_Init+0x118>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <MX_TIM1_Init+0x118>)
 8000602:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000606:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000608:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_TIM1_Init+0x118>)
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800060e:	4b31      	ldr	r3, [pc, #196]	; (80006d4 <MX_TIM1_Init+0x118>)
 8000610:	2200      	movs	r2, #0
 8000612:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000614:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <MX_TIM1_Init+0x118>)
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800061a:	482e      	ldr	r0, [pc, #184]	; (80006d4 <MX_TIM1_Init+0x118>)
 800061c:	f002 fa94 	bl	8002b48 <HAL_TIM_PWM_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000626:	f000 f9c7 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800062a:	2300      	movs	r3, #0
 800062c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800062e:	2300      	movs	r3, #0
 8000630:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000632:	2300      	movs	r3, #0
 8000634:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000636:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800063a:	4619      	mov	r1, r3
 800063c:	4825      	ldr	r0, [pc, #148]	; (80006d4 <MX_TIM1_Init+0x118>)
 800063e:	f003 f8c5 	bl	80037cc <HAL_TIMEx_MasterConfigSynchronization>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000648:	f000 f9b6 	bl	80009b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800064c:	2360      	movs	r3, #96	; 0x60
 800064e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000654:	2300      	movs	r3, #0
 8000656:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000658:	2300      	movs	r3, #0
 800065a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800065c:	2300      	movs	r3, #0
 800065e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000660:	2300      	movs	r3, #0
 8000662:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000664:	2300      	movs	r3, #0
 8000666:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000668:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800066c:	2204      	movs	r2, #4
 800066e:	4619      	mov	r1, r3
 8000670:	4818      	ldr	r0, [pc, #96]	; (80006d4 <MX_TIM1_Init+0x118>)
 8000672:	f002 fbcd 	bl	8002e10 <HAL_TIM_PWM_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800067c:	f000 f99c 	bl	80009b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000688:	2300      	movs	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000698:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800069e:	2300      	movs	r3, #0
 80006a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4619      	mov	r1, r3
 80006b4:	4807      	ldr	r0, [pc, #28]	; (80006d4 <MX_TIM1_Init+0x118>)
 80006b6:	f003 f915 	bl	80038e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80006c0:	f000 f97a 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <MX_TIM1_Init+0x118>)
 80006c6:	f000 f9fb 	bl	8000ac0 <HAL_TIM_MspPostInit>

}
 80006ca:	bf00      	nop
 80006cc:	3758      	adds	r7, #88	; 0x58
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200001b8 	.word	0x200001b8
 80006d8:	40012c00 	.word	0x40012c00

080006dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ee:	463b      	mov	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
 80006fc:	615a      	str	r2, [r3, #20]
 80006fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <MX_TIM2_Init+0xb0>)
 8000702:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000706:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <MX_TIM2_Init+0xb0>)
 800070a:	2223      	movs	r2, #35	; 0x23
 800070c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_TIM2_Init+0xb0>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_TIM2_Init+0xb0>)
 8000716:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800071a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_TIM2_Init+0xb0>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_TIM2_Init+0xb0>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000728:	4818      	ldr	r0, [pc, #96]	; (800078c <MX_TIM2_Init+0xb0>)
 800072a:	f002 fa0d 	bl	8002b48 <HAL_TIM_PWM_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000734:	f000 f940 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4619      	mov	r1, r3
 8000746:	4811      	ldr	r0, [pc, #68]	; (800078c <MX_TIM2_Init+0xb0>)
 8000748:	f003 f840 	bl	80037cc <HAL_TIMEx_MasterConfigSynchronization>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000752:	f000 f931 	bl	80009b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000756:	2360      	movs	r3, #96	; 0x60
 8000758:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	2204      	movs	r2, #4
 800076a:	4619      	mov	r1, r3
 800076c:	4807      	ldr	r0, [pc, #28]	; (800078c <MX_TIM2_Init+0xb0>)
 800076e:	f002 fb4f 	bl	8002e10 <HAL_TIM_PWM_ConfigChannel>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000778:	f000 f91e 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800077c:	4803      	ldr	r0, [pc, #12]	; (800078c <MX_TIM2_Init+0xb0>)
 800077e:	f000 f99f 	bl	8000ac0 <HAL_TIM_MspPostInit>

}
 8000782:	bf00      	nop
 8000784:	3728      	adds	r7, #40	; 0x28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000204 	.word	0x20000204

08000790 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a2:	463b      	mov	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
 80007b0:	615a      	str	r2, [r3, #20]
 80007b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007b4:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_TIM3_Init+0xac>)
 80007b6:	4a22      	ldr	r2, [pc, #136]	; (8000840 <MX_TIM3_Init+0xb0>)
 80007b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35;
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_TIM3_Init+0xac>)
 80007bc:	2223      	movs	r2, #35	; 0x23
 80007be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_TIM3_Init+0xac>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_TIM3_Init+0xac>)
 80007c8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80007cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_TIM3_Init+0xac>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d4:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_TIM3_Init+0xac>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007da:	4818      	ldr	r0, [pc, #96]	; (800083c <MX_TIM3_Init+0xac>)
 80007dc:	f002 f9b4 	bl	8002b48 <HAL_TIM_PWM_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80007e6:	f000 f8e7 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	4810      	ldr	r0, [pc, #64]	; (800083c <MX_TIM3_Init+0xac>)
 80007fa:	f002 ffe7 	bl	80037cc <HAL_TIMEx_MasterConfigSynchronization>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000804:	f000 f8d8 	bl	80009b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000808:	2360      	movs	r3, #96	; 0x60
 800080a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000818:	463b      	mov	r3, r7
 800081a:	2204      	movs	r2, #4
 800081c:	4619      	mov	r1, r3
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <MX_TIM3_Init+0xac>)
 8000820:	f002 faf6 	bl	8002e10 <HAL_TIM_PWM_ConfigChannel>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800082a:	f000 f8c5 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800082e:	4803      	ldr	r0, [pc, #12]	; (800083c <MX_TIM3_Init+0xac>)
 8000830:	f000 f946 	bl	8000ac0 <HAL_TIM_MspPostInit>

}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000168 	.word	0x20000168
 8000840:	40000400 	.word	0x40000400

08000844 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
 8000864:	615a      	str	r2, [r3, #20]
 8000866:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000868:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <MX_TIM4_Init+0xac>)
 800086a:	4a22      	ldr	r2, [pc, #136]	; (80008f4 <MX_TIM4_Init+0xb0>)
 800086c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 35;
 800086e:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <MX_TIM4_Init+0xac>)
 8000870:	2223      	movs	r2, #35	; 0x23
 8000872:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_TIM4_Init+0xac>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_TIM4_Init+0xac>)
 800087c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000880:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000882:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_TIM4_Init+0xac>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000888:	4b19      	ldr	r3, [pc, #100]	; (80008f0 <MX_TIM4_Init+0xac>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800088e:	4818      	ldr	r0, [pc, #96]	; (80008f0 <MX_TIM4_Init+0xac>)
 8000890:	f002 f95a 	bl	8002b48 <HAL_TIM_PWM_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800089a:	f000 f88d 	bl	80009b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4810      	ldr	r0, [pc, #64]	; (80008f0 <MX_TIM4_Init+0xac>)
 80008ae:	f002 ff8d 	bl	80037cc <HAL_TIMEx_MasterConfigSynchronization>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80008b8:	f000 f87e 	bl	80009b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008bc:	2360      	movs	r3, #96	; 0x60
 80008be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008cc:	463b      	mov	r3, r7
 80008ce:	2204      	movs	r2, #4
 80008d0:	4619      	mov	r1, r3
 80008d2:	4807      	ldr	r0, [pc, #28]	; (80008f0 <MX_TIM4_Init+0xac>)
 80008d4:	f002 fa9c 	bl	8002e10 <HAL_TIM_PWM_ConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80008de:	f000 f86b 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80008e2:	4803      	ldr	r0, [pc, #12]	; (80008f0 <MX_TIM4_Init+0xac>)
 80008e4:	f000 f8ec 	bl	8000ac0 <HAL_TIM_MspPostInit>

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	; 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000094 	.word	0x20000094
 80008f4:	40000800 	.word	0x40000800

080008f8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008fc:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_USART3_UART_Init+0x58>)
 80008fe:	4a15      	ldr	r2, [pc, #84]	; (8000954 <MX_USART3_UART_Init+0x5c>)
 8000900:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000902:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000904:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000908:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_USART3_UART_Init+0x58>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_USART3_UART_Init+0x58>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_USART3_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_USART3_UART_Init+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USART3_UART_Init+0x58>)
 800093c:	f003 f858 	bl	80039f0 <HAL_UART_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000946:	f000 f837 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200000e0 	.word	0x200000e0
 8000954:	40004800 	.word	0x40004800

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095e:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_GPIO_Init+0x5c>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <MX_GPIO_Init+0x5c>)
 8000964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000968:	6153      	str	r3, [r2, #20]
 800096a:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_GPIO_Init+0x5c>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_GPIO_Init+0x5c>)
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <MX_GPIO_Init+0x5c>)
 800097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000980:	6153      	str	r3, [r2, #20]
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_GPIO_Init+0x5c>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_GPIO_Init+0x5c>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <MX_GPIO_Init+0x5c>)
 8000994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000998:	6153      	str	r3, [r2, #20]
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_GPIO_Init+0x5c>)
 800099c:	695b      	ldr	r3, [r3, #20]
 800099e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

}
 80009a6:	bf00      	nop
 80009a8:	3714      	adds	r7, #20
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <HAL_MspInit+0x44>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <HAL_MspInit+0x44>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6193      	str	r3, [r2, #24]
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <HAL_MspInit+0x44>)
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_MspInit+0x44>)
 80009e4:	69db      	ldr	r3, [r3, #28]
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_MspInit+0x44>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	61d3      	str	r3, [r2, #28]
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_MspInit+0x44>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40021000 	.word	0x40021000

08000a0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b087      	sub	sp, #28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a25      	ldr	r2, [pc, #148]	; (8000ab0 <HAL_TIM_PWM_MspInit+0xa4>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d10c      	bne.n	8000a38 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	4a24      	ldr	r2, [pc, #144]	; (8000ab4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000a24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a28:	6193      	str	r3, [r2, #24]
 8000a2a:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000a36:	e034      	b.n	8000aa2 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a40:	d10c      	bne.n	8000a5c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	4a1b      	ldr	r2, [pc, #108]	; (8000ab4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	61d3      	str	r3, [r2, #28]
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
}
 8000a5a:	e022      	b.n	8000aa2 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM3)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <HAL_TIM_PWM_MspInit+0xac>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d10c      	bne.n	8000a80 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	61d3      	str	r3, [r2, #28]
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
}
 8000a7e:	e010      	b.n	8000aa2 <HAL_TIM_PWM_MspInit+0x96>
  else if(htim_pwm->Instance==TIM4)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <HAL_TIM_PWM_MspInit+0xb0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d10b      	bne.n	8000aa2 <HAL_TIM_PWM_MspInit+0x96>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000a8a:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	4a09      	ldr	r2, [pc, #36]	; (8000ab4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	61d3      	str	r3, [r2, #28]
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <HAL_TIM_PWM_MspInit+0xa8>)
 8000a98:	69db      	ldr	r3, [r3, #28]
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
}
 8000aa2:	bf00      	nop
 8000aa4:	371c      	adds	r7, #28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40012c00 	.word	0x40012c00
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40000400 	.word	0x40000400
 8000abc:	40000800 	.word	0x40000800

08000ac0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08c      	sub	sp, #48	; 0x30
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 031c 	add.w	r3, r7, #28
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a46      	ldr	r2, [pc, #280]	; (8000bf8 <HAL_TIM_MspPostInit+0x138>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d11c      	bne.n	8000b1c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae2:	4b46      	ldr	r3, [pc, #280]	; (8000bfc <HAL_TIM_MspPostInit+0x13c>)
 8000ae4:	695b      	ldr	r3, [r3, #20]
 8000ae6:	4a45      	ldr	r2, [pc, #276]	; (8000bfc <HAL_TIM_MspPostInit+0x13c>)
 8000ae8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000aec:	6153      	str	r3, [r2, #20]
 8000aee:	4b43      	ldr	r3, [pc, #268]	; (8000bfc <HAL_TIM_MspPostInit+0x13c>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000af6:	61bb      	str	r3, [r7, #24]
 8000af8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	483a      	ldr	r0, [pc, #232]	; (8000c00 <HAL_TIM_MspPostInit+0x140>)
 8000b16:	f000 fb23 	bl	8001160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000b1a:	e068      	b.n	8000bee <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b24:	d11d      	bne.n	8000b62 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	4b35      	ldr	r3, [pc, #212]	; (8000bfc <HAL_TIM_MspPostInit+0x13c>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	4a34      	ldr	r2, [pc, #208]	; (8000bfc <HAL_TIM_MspPostInit+0x13c>)
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	6153      	str	r3, [r2, #20]
 8000b32:	4b32      	ldr	r3, [pc, #200]	; (8000bfc <HAL_TIM_MspPostInit+0x13c>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5c:	f000 fb00 	bl	8001160 <HAL_GPIO_Init>
}
 8000b60:	e045      	b.n	8000bee <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM3)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a27      	ldr	r2, [pc, #156]	; (8000c04 <HAL_TIM_MspPostInit+0x144>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d11d      	bne.n	8000ba8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <HAL_TIM_MspPostInit+0x13c>)
 8000b6e:	695b      	ldr	r3, [r3, #20]
 8000b70:	4a22      	ldr	r2, [pc, #136]	; (8000bfc <HAL_TIM_MspPostInit+0x13c>)
 8000b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b76:	6153      	str	r3, [r2, #20]
 8000b78:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <HAL_TIM_MspPostInit+0x13c>)
 8000b7a:	695b      	ldr	r3, [r3, #20]
 8000b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b84:	2310      	movs	r3, #16
 8000b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b94:	2302      	movs	r3, #2
 8000b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba2:	f000 fadd 	bl	8001160 <HAL_GPIO_Init>
}
 8000ba6:	e022      	b.n	8000bee <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM4)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a16      	ldr	r2, [pc, #88]	; (8000c08 <HAL_TIM_MspPostInit+0x148>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d11d      	bne.n	8000bee <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <HAL_TIM_MspPostInit+0x13c>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	4a11      	ldr	r2, [pc, #68]	; (8000bfc <HAL_TIM_MspPostInit+0x13c>)
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	6153      	str	r3, [r2, #20]
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <HAL_TIM_MspPostInit+0x13c>)
 8000bc0:	695b      	ldr	r3, [r3, #20]
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8000bdc:	230a      	movs	r3, #10
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bea:	f000 fab9 	bl	8001160 <HAL_GPIO_Init>
}
 8000bee:	bf00      	nop
 8000bf0:	3730      	adds	r7, #48	; 0x30
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40012c00 	.word	0x40012c00
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	48000800 	.word	0x48000800
 8000c04:	40000400 	.word	0x40000400
 8000c08:	40000800 	.word	0x40000800

08000c0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a1b      	ldr	r2, [pc, #108]	; (8000c98 <HAL_UART_MspInit+0x8c>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d130      	bne.n	8000c90 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c2e:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <HAL_UART_MspInit+0x90>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	4a1a      	ldr	r2, [pc, #104]	; (8000c9c <HAL_UART_MspInit+0x90>)
 8000c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c38:	61d3      	str	r3, [r2, #28]
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <HAL_UART_MspInit+0x90>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <HAL_UART_MspInit+0x90>)
 8000c48:	695b      	ldr	r3, [r3, #20]
 8000c4a:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <HAL_UART_MspInit+0x90>)
 8000c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c50:	6153      	str	r3, [r2, #20]
 8000c52:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <HAL_UART_MspInit+0x90>)
 8000c54:	695b      	ldr	r3, [r3, #20]
 8000c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c70:	2307      	movs	r3, #7
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4809      	ldr	r0, [pc, #36]	; (8000ca0 <HAL_UART_MspInit+0x94>)
 8000c7c:	f000 fa70 	bl	8001160 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2100      	movs	r1, #0
 8000c84:	2027      	movs	r0, #39	; 0x27
 8000c86:	f000 f9be 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c8a:	2027      	movs	r0, #39	; 0x27
 8000c8c:	f000 f9d7 	bl	800103e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c90:	bf00      	nop
 8000c92:	3728      	adds	r7, #40	; 0x28
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40004800 	.word	0x40004800
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	48000400 	.word	0x48000400

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <NMI_Handler+0x4>

08000caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf0:	f000 f88e 	bl	8000e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <USART3_IRQHandler+0x10>)
 8000cfe:	f002 ff13 	bl	8003b28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	200000e0 	.word	0x200000e0

08000d0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <SystemInit+0x20>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <SystemInit+0x20>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d34:	480d      	ldr	r0, [pc, #52]	; (8000d6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d36:	490e      	ldr	r1, [pc, #56]	; (8000d70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <LoopForever+0xe>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d4c:	4c0b      	ldr	r4, [pc, #44]	; (8000d7c <LoopForever+0x16>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d5a:	f7ff ffd7 	bl	8000d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f004 f827 	bl	8004db0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d62:	f7ff fb5b 	bl	800041c <main>

08000d66 <LoopForever>:

LoopForever:
    b LoopForever
 8000d66:	e7fe      	b.n	8000d66 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d68:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d74:	0800509c 	.word	0x0800509c
  ldr r2, =_sbss
 8000d78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d7c:	20000268 	.word	0x20000268

08000d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC1_2_IRQHandler>
	...

08000d84 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <HAL_Init+0x28>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a07      	ldr	r2, [pc, #28]	; (8000dac <HAL_Init+0x28>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f92b 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f000 f808 	bl	8000db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da0:	f7ff fe10 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40022000 	.word	0x40022000

08000db0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x54>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <HAL_InitTick+0x58>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f943 	bl	800105a <HAL_SYSTICK_Config>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e00e      	b.n	8000dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d80a      	bhi.n	8000dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de4:	2200      	movs	r2, #0
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dec:	f000 f90b 	bl	8001006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_InitTick+0x5c>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	e000      	b.n	8000dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000000 	.word	0x20000000
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000004 	.word	0x20000004

08000e10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x20>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x24>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4413      	add	r3, r2
 8000e20:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <HAL_IncTick+0x24>)
 8000e22:	6013      	str	r3, [r2, #0]
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000264 	.word	0x20000264

08000e38 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_GetTick+0x14>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000264 	.word	0x20000264

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db0b      	blt.n	8000ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 021f 	and.w	r2, r3, #31
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <__NVIC_EnableIRQ+0x38>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	095b      	lsrs	r3, r3, #5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fbc:	d301      	bcc.n	8000fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00f      	b.n	8000fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <SysTick_Config+0x40>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fca:	210f      	movs	r1, #15
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fd0:	f7ff ff8e 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SysTick_Config+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SysTick_Config+0x40>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff29 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff3e 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff8e 	bl	8000f44 <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff5d 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff31 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffa2 	bl	8000fac <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001080:	2b02      	cmp	r3, #2
 8001082:	d008      	beq.n	8001096 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2204      	movs	r2, #4
 8001088:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e020      	b.n	80010d8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 020e 	bic.w	r2, r2, #14
 80010a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0201 	bic.w	r2, r2, #1
 80010b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010be:	2101      	movs	r1, #1
 80010c0:	fa01 f202 	lsl.w	r2, r1, r2
 80010c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d005      	beq.n	8001106 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2204      	movs	r2, #4
 80010fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	e027      	b.n	8001156 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 020e 	bic.w	r2, r2, #14
 8001114:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 0201 	bic.w	r2, r2, #1
 8001124:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800112e:	2101      	movs	r1, #1
 8001130:	fa01 f202 	lsl.w	r2, r1, r2
 8001134:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	4798      	blx	r3
    } 
  }
  return status;
 8001156:	7bfb      	ldrb	r3, [r7, #15]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001160:	b480      	push	{r7}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116e:	e160      	b.n	8001432 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	2101      	movs	r1, #1
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	fa01 f303 	lsl.w	r3, r1, r3
 800117c:	4013      	ands	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8152 	beq.w	800142c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 0303 	and.w	r3, r3, #3
 8001190:	2b01      	cmp	r3, #1
 8001192:	d005      	beq.n	80011a0 <HAL_GPIO_Init+0x40>
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d130      	bne.n	8001202 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	2203      	movs	r2, #3
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	68da      	ldr	r2, [r3, #12]
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011d6:	2201      	movs	r2, #1
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	091b      	lsrs	r3, r3, #4
 80011ec:	f003 0201 	and.w	r2, r3, #1
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0303 	and.w	r3, r3, #3
 800120a:	2b03      	cmp	r3, #3
 800120c:	d017      	beq.n	800123e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	2203      	movs	r2, #3
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d123      	bne.n	8001292 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	08da      	lsrs	r2, r3, #3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	3208      	adds	r2, #8
 8001252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001256:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	220f      	movs	r2, #15
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	691a      	ldr	r2, [r3, #16]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	08da      	lsrs	r2, r3, #3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3208      	adds	r2, #8
 800128c:	6939      	ldr	r1, [r7, #16]
 800128e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	2203      	movs	r2, #3
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 0203 	and.w	r2, r3, #3
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 80ac 	beq.w	800142c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d4:	4b5e      	ldr	r3, [pc, #376]	; (8001450 <HAL_GPIO_Init+0x2f0>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	4a5d      	ldr	r2, [pc, #372]	; (8001450 <HAL_GPIO_Init+0x2f0>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6193      	str	r3, [r2, #24]
 80012e0:	4b5b      	ldr	r3, [pc, #364]	; (8001450 <HAL_GPIO_Init+0x2f0>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ec:	4a59      	ldr	r2, [pc, #356]	; (8001454 <HAL_GPIO_Init+0x2f4>)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	220f      	movs	r2, #15
 8001304:	fa02 f303 	lsl.w	r3, r2, r3
 8001308:	43db      	mvns	r3, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001316:	d025      	beq.n	8001364 <HAL_GPIO_Init+0x204>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a4f      	ldr	r2, [pc, #316]	; (8001458 <HAL_GPIO_Init+0x2f8>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d01f      	beq.n	8001360 <HAL_GPIO_Init+0x200>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a4e      	ldr	r2, [pc, #312]	; (800145c <HAL_GPIO_Init+0x2fc>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d019      	beq.n	800135c <HAL_GPIO_Init+0x1fc>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a4d      	ldr	r2, [pc, #308]	; (8001460 <HAL_GPIO_Init+0x300>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d013      	beq.n	8001358 <HAL_GPIO_Init+0x1f8>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a4c      	ldr	r2, [pc, #304]	; (8001464 <HAL_GPIO_Init+0x304>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d00d      	beq.n	8001354 <HAL_GPIO_Init+0x1f4>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a4b      	ldr	r2, [pc, #300]	; (8001468 <HAL_GPIO_Init+0x308>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d007      	beq.n	8001350 <HAL_GPIO_Init+0x1f0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a4a      	ldr	r2, [pc, #296]	; (800146c <HAL_GPIO_Init+0x30c>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d101      	bne.n	800134c <HAL_GPIO_Init+0x1ec>
 8001348:	2306      	movs	r3, #6
 800134a:	e00c      	b.n	8001366 <HAL_GPIO_Init+0x206>
 800134c:	2307      	movs	r3, #7
 800134e:	e00a      	b.n	8001366 <HAL_GPIO_Init+0x206>
 8001350:	2305      	movs	r3, #5
 8001352:	e008      	b.n	8001366 <HAL_GPIO_Init+0x206>
 8001354:	2304      	movs	r3, #4
 8001356:	e006      	b.n	8001366 <HAL_GPIO_Init+0x206>
 8001358:	2303      	movs	r3, #3
 800135a:	e004      	b.n	8001366 <HAL_GPIO_Init+0x206>
 800135c:	2302      	movs	r3, #2
 800135e:	e002      	b.n	8001366 <HAL_GPIO_Init+0x206>
 8001360:	2301      	movs	r3, #1
 8001362:	e000      	b.n	8001366 <HAL_GPIO_Init+0x206>
 8001364:	2300      	movs	r3, #0
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	f002 0203 	and.w	r2, r2, #3
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	4093      	lsls	r3, r2
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001376:	4937      	ldr	r1, [pc, #220]	; (8001454 <HAL_GPIO_Init+0x2f4>)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	3302      	adds	r3, #2
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001384:	4b3a      	ldr	r3, [pc, #232]	; (8001470 <HAL_GPIO_Init+0x310>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013a8:	4a31      	ldr	r2, [pc, #196]	; (8001470 <HAL_GPIO_Init+0x310>)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013ae:	4b30      	ldr	r3, [pc, #192]	; (8001470 <HAL_GPIO_Init+0x310>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013d2:	4a27      	ldr	r2, [pc, #156]	; (8001470 <HAL_GPIO_Init+0x310>)
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <HAL_GPIO_Init+0x310>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013fc:	4a1c      	ldr	r2, [pc, #112]	; (8001470 <HAL_GPIO_Init+0x310>)
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <HAL_GPIO_Init+0x310>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	43db      	mvns	r3, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001426:	4a12      	ldr	r2, [pc, #72]	; (8001470 <HAL_GPIO_Init+0x310>)
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3301      	adds	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	fa22 f303 	lsr.w	r3, r2, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	f47f ae97 	bne.w	8001170 <HAL_GPIO_Init+0x10>
  }
}
 8001442:	bf00      	nop
 8001444:	bf00      	nop
 8001446:	371c      	adds	r7, #28
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	40021000 	.word	0x40021000
 8001454:	40010000 	.word	0x40010000
 8001458:	48000400 	.word	0x48000400
 800145c:	48000800 	.word	0x48000800
 8001460:	48000c00 	.word	0x48000c00
 8001464:	48001000 	.word	0x48001000
 8001468:	48001400 	.word	0x48001400
 800146c:	48001800 	.word	0x48001800
 8001470:	40010400 	.word	0x40010400

08001474 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800147a:	af00      	add	r7, sp, #0
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	f000 bf01 	b.w	8002290 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 8160 	beq.w	800175e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800149e:	4bae      	ldr	r3, [pc, #696]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	d00c      	beq.n	80014c4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014aa:	4bab      	ldr	r3, [pc, #684]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d159      	bne.n	800156a <HAL_RCC_OscConfig+0xf6>
 80014b6:	4ba8      	ldr	r3, [pc, #672]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80014be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c2:	d152      	bne.n	800156a <HAL_RCC_OscConfig+0xf6>
 80014c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80014d0:	fa93 f3a3 	rbit	r3, r3
 80014d4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014d8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014dc:	fab3 f383 	clz	r3, r3
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d102      	bne.n	80014f6 <HAL_RCC_OscConfig+0x82>
 80014f0:	4b99      	ldr	r3, [pc, #612]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	e015      	b.n	8001522 <HAL_RCC_OscConfig+0xae>
 80014f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014fa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001502:	fa93 f3a3 	rbit	r3, r3
 8001506:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800150a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800150e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001512:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001516:	fa93 f3a3 	rbit	r3, r3
 800151a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800151e:	4b8e      	ldr	r3, [pc, #568]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 8001520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001522:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001526:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800152a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800152e:	fa92 f2a2 	rbit	r2, r2
 8001532:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001536:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800153a:	fab2 f282 	clz	r2, r2
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	f042 0220 	orr.w	r2, r2, #32
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	f002 021f 	and.w	r2, r2, #31
 800154a:	2101      	movs	r1, #1
 800154c:	fa01 f202 	lsl.w	r2, r1, r2
 8001550:	4013      	ands	r3, r2
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 8102 	beq.w	800175c <HAL_RCC_OscConfig+0x2e8>
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	f040 80fc 	bne.w	800175c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	f000 be93 	b.w	8002290 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001574:	d106      	bne.n	8001584 <HAL_RCC_OscConfig+0x110>
 8001576:	4b78      	ldr	r3, [pc, #480]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a77      	ldr	r2, [pc, #476]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e030      	b.n	80015e6 <HAL_RCC_OscConfig+0x172>
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x134>
 800158e:	4b72      	ldr	r3, [pc, #456]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a71      	ldr	r2, [pc, #452]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 8001594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	4b6f      	ldr	r3, [pc, #444]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a6e      	ldr	r2, [pc, #440]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 80015a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e01e      	b.n	80015e6 <HAL_RCC_OscConfig+0x172>
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015b2:	d10c      	bne.n	80015ce <HAL_RCC_OscConfig+0x15a>
 80015b4:	4b68      	ldr	r3, [pc, #416]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a67      	ldr	r2, [pc, #412]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 80015ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015be:	6013      	str	r3, [r2, #0]
 80015c0:	4b65      	ldr	r3, [pc, #404]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a64      	ldr	r2, [pc, #400]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 80015c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	e00b      	b.n	80015e6 <HAL_RCC_OscConfig+0x172>
 80015ce:	4b62      	ldr	r3, [pc, #392]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a61      	ldr	r2, [pc, #388]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 80015d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	4b5f      	ldr	r3, [pc, #380]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a5e      	ldr	r2, [pc, #376]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 80015e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d059      	beq.n	80016a4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fc22 	bl	8000e38 <HAL_GetTick>
 80015f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015fa:	f7ff fc1d 	bl	8000e38 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	; 0x64
 8001608:	d902      	bls.n	8001610 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	f000 be40 	b.w	8002290 <HAL_RCC_OscConfig+0xe1c>
 8001610:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001614:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001618:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800161c:	fa93 f3a3 	rbit	r3, r3
 8001620:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001624:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001628:	fab3 f383 	clz	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	095b      	lsrs	r3, r3, #5
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d102      	bne.n	8001642 <HAL_RCC_OscConfig+0x1ce>
 800163c:	4b46      	ldr	r3, [pc, #280]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	e015      	b.n	800166e <HAL_RCC_OscConfig+0x1fa>
 8001642:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001646:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800164a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800164e:	fa93 f3a3 	rbit	r3, r3
 8001652:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001656:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800165a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800165e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001662:	fa93 f3a3 	rbit	r3, r3
 8001666:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800166a:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001672:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001676:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800167a:	fa92 f2a2 	rbit	r2, r2
 800167e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001682:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001686:	fab2 f282 	clz	r2, r2
 800168a:	b2d2      	uxtb	r2, r2
 800168c:	f042 0220 	orr.w	r2, r2, #32
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	f002 021f 	and.w	r2, r2, #31
 8001696:	2101      	movs	r1, #1
 8001698:	fa01 f202 	lsl.w	r2, r1, r2
 800169c:	4013      	ands	r3, r2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0ab      	beq.n	80015fa <HAL_RCC_OscConfig+0x186>
 80016a2:	e05c      	b.n	800175e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fbc8 	bl	8000e38 <HAL_GetTick>
 80016a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ac:	e00a      	b.n	80016c4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ae:	f7ff fbc3 	bl	8000e38 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	; 0x64
 80016bc:	d902      	bls.n	80016c4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	f000 bde6 	b.w	8002290 <HAL_RCC_OscConfig+0xe1c>
 80016c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016c8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80016d0:	fa93 f3a3 	rbit	r3, r3
 80016d4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80016d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016dc:	fab3 f383 	clz	r3, r3
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	095b      	lsrs	r3, r3, #5
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d102      	bne.n	80016f6 <HAL_RCC_OscConfig+0x282>
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	e015      	b.n	8001722 <HAL_RCC_OscConfig+0x2ae>
 80016f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016fa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800170a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800170e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001712:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001716:	fa93 f3a3 	rbit	r3, r3
 800171a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_RCC_OscConfig+0x2e4>)
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001726:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800172a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800172e:	fa92 f2a2 	rbit	r2, r2
 8001732:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001736:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800173a:	fab2 f282 	clz	r2, r2
 800173e:	b2d2      	uxtb	r2, r2
 8001740:	f042 0220 	orr.w	r2, r2, #32
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	f002 021f 	and.w	r2, r2, #31
 800174a:	2101      	movs	r1, #1
 800174c:	fa01 f202 	lsl.w	r2, r1, r2
 8001750:	4013      	ands	r3, r2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1ab      	bne.n	80016ae <HAL_RCC_OscConfig+0x23a>
 8001756:	e002      	b.n	800175e <HAL_RCC_OscConfig+0x2ea>
 8001758:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 8170 	beq.w	8001a4e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800176e:	4bd0      	ldr	r3, [pc, #832]	; (8001ab0 <HAL_RCC_OscConfig+0x63c>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00c      	beq.n	8001794 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800177a:	4bcd      	ldr	r3, [pc, #820]	; (8001ab0 <HAL_RCC_OscConfig+0x63c>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b08      	cmp	r3, #8
 8001784:	d16d      	bne.n	8001862 <HAL_RCC_OscConfig+0x3ee>
 8001786:	4bca      	ldr	r3, [pc, #808]	; (8001ab0 <HAL_RCC_OscConfig+0x63c>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800178e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001792:	d166      	bne.n	8001862 <HAL_RCC_OscConfig+0x3ee>
 8001794:	2302      	movs	r3, #2
 8001796:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800179e:	fa93 f3a3 	rbit	r3, r3
 80017a2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80017a6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017aa:	fab3 f383 	clz	r3, r3
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	095b      	lsrs	r3, r3, #5
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d102      	bne.n	80017c4 <HAL_RCC_OscConfig+0x350>
 80017be:	4bbc      	ldr	r3, [pc, #752]	; (8001ab0 <HAL_RCC_OscConfig+0x63c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	e013      	b.n	80017ec <HAL_RCC_OscConfig+0x378>
 80017c4:	2302      	movs	r3, #2
 80017c6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80017ce:	fa93 f3a3 	rbit	r3, r3
 80017d2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80017d6:	2302      	movs	r3, #2
 80017d8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017dc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80017e0:	fa93 f3a3 	rbit	r3, r3
 80017e4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80017e8:	4bb1      	ldr	r3, [pc, #708]	; (8001ab0 <HAL_RCC_OscConfig+0x63c>)
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	2202      	movs	r2, #2
 80017ee:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80017f2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80017f6:	fa92 f2a2 	rbit	r2, r2
 80017fa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80017fe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001802:	fab2 f282 	clz	r2, r2
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	f042 0220 	orr.w	r2, r2, #32
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	f002 021f 	and.w	r2, r2, #31
 8001812:	2101      	movs	r1, #1
 8001814:	fa01 f202 	lsl.w	r2, r1, r2
 8001818:	4013      	ands	r3, r2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d007      	beq.n	800182e <HAL_RCC_OscConfig+0x3ba>
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d002      	beq.n	800182e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	f000 bd31 	b.w	8002290 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182e:	4ba0      	ldr	r3, [pc, #640]	; (8001ab0 <HAL_RCC_OscConfig+0x63c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	21f8      	movs	r1, #248	; 0xf8
 800183e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001842:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001846:	fa91 f1a1 	rbit	r1, r1
 800184a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800184e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001852:	fab1 f181 	clz	r1, r1
 8001856:	b2c9      	uxtb	r1, r1
 8001858:	408b      	lsls	r3, r1
 800185a:	4995      	ldr	r1, [pc, #596]	; (8001ab0 <HAL_RCC_OscConfig+0x63c>)
 800185c:	4313      	orrs	r3, r2
 800185e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001860:	e0f5      	b.n	8001a4e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 8085 	beq.w	8001978 <HAL_RCC_OscConfig+0x504>
 800186e:	2301      	movs	r3, #1
 8001870:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001874:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001878:	fa93 f3a3 	rbit	r3, r3
 800187c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001880:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001884:	fab3 f383 	clz	r3, r3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800188e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	461a      	mov	r2, r3
 8001896:	2301      	movs	r3, #1
 8001898:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189a:	f7ff facd 	bl	8000e38 <HAL_GetTick>
 800189e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a4:	f7ff fac8 	bl	8000e38 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d902      	bls.n	80018ba <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	f000 bceb 	b.w	8002290 <HAL_RCC_OscConfig+0xe1c>
 80018ba:	2302      	movs	r3, #2
 80018bc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80018c4:	fa93 f3a3 	rbit	r3, r3
 80018c8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80018cc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d0:	fab3 f383 	clz	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d102      	bne.n	80018ea <HAL_RCC_OscConfig+0x476>
 80018e4:	4b72      	ldr	r3, [pc, #456]	; (8001ab0 <HAL_RCC_OscConfig+0x63c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	e013      	b.n	8001912 <HAL_RCC_OscConfig+0x49e>
 80018ea:	2302      	movs	r3, #2
 80018ec:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80018fc:	2302      	movs	r3, #2
 80018fe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001902:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001906:	fa93 f3a3 	rbit	r3, r3
 800190a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800190e:	4b68      	ldr	r3, [pc, #416]	; (8001ab0 <HAL_RCC_OscConfig+0x63c>)
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	2202      	movs	r2, #2
 8001914:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001918:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800191c:	fa92 f2a2 	rbit	r2, r2
 8001920:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001924:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001928:	fab2 f282 	clz	r2, r2
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	f042 0220 	orr.w	r2, r2, #32
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	f002 021f 	and.w	r2, r2, #31
 8001938:	2101      	movs	r1, #1
 800193a:	fa01 f202 	lsl.w	r2, r1, r2
 800193e:	4013      	ands	r3, r2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0af      	beq.n	80018a4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001944:	4b5a      	ldr	r3, [pc, #360]	; (8001ab0 <HAL_RCC_OscConfig+0x63c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	21f8      	movs	r1, #248	; 0xf8
 8001954:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001958:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800195c:	fa91 f1a1 	rbit	r1, r1
 8001960:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001964:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001968:	fab1 f181 	clz	r1, r1
 800196c:	b2c9      	uxtb	r1, r1
 800196e:	408b      	lsls	r3, r1
 8001970:	494f      	ldr	r1, [pc, #316]	; (8001ab0 <HAL_RCC_OscConfig+0x63c>)
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
 8001976:	e06a      	b.n	8001a4e <HAL_RCC_OscConfig+0x5da>
 8001978:	2301      	movs	r3, #1
 800197a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001982:	fa93 f3a3 	rbit	r3, r3
 8001986:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800198a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198e:	fab3 f383 	clz	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001998:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	461a      	mov	r2, r3
 80019a0:	2300      	movs	r3, #0
 80019a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff fa48 	bl	8000e38 <HAL_GetTick>
 80019a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ac:	e00a      	b.n	80019c4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ae:	f7ff fa43 	bl	8000e38 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d902      	bls.n	80019c4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	f000 bc66 	b.w	8002290 <HAL_RCC_OscConfig+0xe1c>
 80019c4:	2302      	movs	r3, #2
 80019c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80019d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019da:	fab3 f383 	clz	r3, r3
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	095b      	lsrs	r3, r3, #5
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d102      	bne.n	80019f4 <HAL_RCC_OscConfig+0x580>
 80019ee:	4b30      	ldr	r3, [pc, #192]	; (8001ab0 <HAL_RCC_OscConfig+0x63c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	e013      	b.n	8001a1c <HAL_RCC_OscConfig+0x5a8>
 80019f4:	2302      	movs	r3, #2
 80019f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a06:	2302      	movs	r3, #2
 8001a08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a10:	fa93 f3a3 	rbit	r3, r3
 8001a14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a18:	4b25      	ldr	r3, [pc, #148]	; (8001ab0 <HAL_RCC_OscConfig+0x63c>)
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001a22:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001a26:	fa92 f2a2 	rbit	r2, r2
 8001a2a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001a2e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a32:	fab2 f282 	clz	r2, r2
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	f042 0220 	orr.w	r2, r2, #32
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	f002 021f 	and.w	r2, r2, #31
 8001a42:	2101      	movs	r1, #1
 8001a44:	fa01 f202 	lsl.w	r2, r1, r2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1af      	bne.n	80019ae <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80da 	beq.w	8001c12 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d069      	beq.n	8001b3c <HAL_RCC_OscConfig+0x6c8>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001a7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7e:	fab3 f383 	clz	r3, r3
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <HAL_RCC_OscConfig+0x640>)
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	2301      	movs	r3, #1
 8001a90:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a92:	f7ff f9d1 	bl	8000e38 <HAL_GetTick>
 8001a96:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9a:	e00d      	b.n	8001ab8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a9c:	f7ff f9cc 	bl	8000e38 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d905      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e3ef      	b.n	8002290 <HAL_RCC_OscConfig+0xe1c>
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	10908120 	.word	0x10908120
 8001ab8:	2302      	movs	r3, #2
 8001aba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ac2:	fa93 f2a3 	rbit	r2, r3
 8001ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	fa93 f2a3 	rbit	r2, r3
 8001ade:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001ae8:	2202      	movs	r2, #2
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	fa93 f2a3 	rbit	r2, r3
 8001af6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001afa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afc:	4ba4      	ldr	r3, [pc, #656]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b00:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b04:	2102      	movs	r1, #2
 8001b06:	6019      	str	r1, [r3, #0]
 8001b08:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	fa93 f1a3 	rbit	r1, r3
 8001b12:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b16:	6019      	str	r1, [r3, #0]
  return result;
 8001b18:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	fab3 f383 	clz	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f303 	lsl.w	r3, r1, r3
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0b0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x628>
 8001b3a:	e06a      	b.n	8001c12 <HAL_RCC_OscConfig+0x79e>
 8001b3c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	fa93 f2a3 	rbit	r2, r3
 8001b4e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b52:	601a      	str	r2, [r3, #0]
  return result;
 8001b54:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b58:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5a:	fab3 f383 	clz	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b8c      	ldr	r3, [pc, #560]	; (8001d94 <HAL_RCC_OscConfig+0x920>)
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	461a      	mov	r2, r3
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff f963 	bl	8000e38 <HAL_GetTick>
 8001b72:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b76:	e009      	b.n	8001b8c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b78:	f7ff f95e 	bl	8000e38 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e381      	b.n	8002290 <HAL_RCC_OscConfig+0xe1c>
 8001b8c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b90:	2202      	movs	r2, #2
 8001b92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	fa93 f2a3 	rbit	r2, r3
 8001b9e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ba8:	2202      	movs	r2, #2
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	fa93 f2a3 	rbit	r2, r3
 8001bb6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	fa93 f2a3 	rbit	r2, r3
 8001bce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001bd2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd4:	4b6e      	ldr	r3, [pc, #440]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bd8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bdc:	2102      	movs	r1, #2
 8001bde:	6019      	str	r1, [r3, #0]
 8001be0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	fa93 f1a3 	rbit	r1, r3
 8001bea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bee:	6019      	str	r1, [r3, #0]
  return result;
 8001bf0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	fab3 f383 	clz	r3, r3
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	2101      	movs	r1, #1
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1b2      	bne.n	8001b78 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 8157 	beq.w	8001ed0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c28:	4b59      	ldr	r3, [pc, #356]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d112      	bne.n	8001c5a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c34:	4b56      	ldr	r3, [pc, #344]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	4a55      	ldr	r2, [pc, #340]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	61d3      	str	r3, [r2, #28]
 8001c40:	4b53      	ldr	r3, [pc, #332]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c54:	2301      	movs	r3, #1
 8001c56:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5a:	4b4f      	ldr	r3, [pc, #316]	; (8001d98 <HAL_RCC_OscConfig+0x924>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d11a      	bne.n	8001c9c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c66:	4b4c      	ldr	r3, [pc, #304]	; (8001d98 <HAL_RCC_OscConfig+0x924>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a4b      	ldr	r2, [pc, #300]	; (8001d98 <HAL_RCC_OscConfig+0x924>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c70:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c72:	f7ff f8e1 	bl	8000e38 <HAL_GetTick>
 8001c76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7a:	e009      	b.n	8001c90 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7c:	f7ff f8dc 	bl	8000e38 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b64      	cmp	r3, #100	; 0x64
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e2ff      	b.n	8002290 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	4b41      	ldr	r3, [pc, #260]	; (8001d98 <HAL_RCC_OscConfig+0x924>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0ef      	beq.n	8001c7c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d106      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x840>
 8001ca6:	4b3a      	ldr	r3, [pc, #232]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	4a39      	ldr	r2, [pc, #228]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6213      	str	r3, [r2, #32]
 8001cb2:	e02f      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a0>
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x864>
 8001cbe:	4b34      	ldr	r3, [pc, #208]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a33      	ldr	r2, [pc, #204]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6213      	str	r3, [r2, #32]
 8001cca:	4b31      	ldr	r3, [pc, #196]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a30      	ldr	r2, [pc, #192]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	6213      	str	r3, [r2, #32]
 8001cd6:	e01d      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a0>
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x888>
 8001ce2:	4b2b      	ldr	r3, [pc, #172]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4a2a      	ldr	r2, [pc, #168]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	6213      	str	r3, [r2, #32]
 8001cee:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4a27      	ldr	r2, [pc, #156]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6213      	str	r3, [r2, #32]
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a0>
 8001cfc:	4b24      	ldr	r3, [pc, #144]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	4a23      	ldr	r2, [pc, #140]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001d02:	f023 0301 	bic.w	r3, r3, #1
 8001d06:	6213      	str	r3, [r2, #32]
 8001d08:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4a20      	ldr	r2, [pc, #128]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001d0e:	f023 0304 	bic.w	r3, r3, #4
 8001d12:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d06a      	beq.n	8001df4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1e:	f7ff f88b 	bl	8000e38 <HAL_GetTick>
 8001d22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d26:	e00b      	b.n	8001d40 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d28:	f7ff f886 	bl	8000e38 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e2a7      	b.n	8002290 <HAL_RCC_OscConfig+0xe1c>
 8001d40:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d44:	2202      	movs	r2, #2
 8001d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	fa93 f2a3 	rbit	r2, r3
 8001d52:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	fa93 f2a3 	rbit	r2, r3
 8001d6a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d6e:	601a      	str	r2, [r3, #0]
  return result;
 8001d70:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d74:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	095b      	lsrs	r3, r3, #5
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d108      	bne.n	8001d9c <HAL_RCC_OscConfig+0x928>
 8001d8a:	4b01      	ldr	r3, [pc, #4]	; (8001d90 <HAL_RCC_OscConfig+0x91c>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	e013      	b.n	8001db8 <HAL_RCC_OscConfig+0x944>
 8001d90:	40021000 	.word	0x40021000
 8001d94:	10908120 	.word	0x10908120
 8001d98:	40007000 	.word	0x40007000
 8001d9c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001da0:	2202      	movs	r2, #2
 8001da2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	fa93 f2a3 	rbit	r2, r3
 8001dae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	4bc0      	ldr	r3, [pc, #768]	; (80020b8 <HAL_RCC_OscConfig+0xc44>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001dbc:	2102      	movs	r1, #2
 8001dbe:	6011      	str	r1, [r2, #0]
 8001dc0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	fa92 f1a2 	rbit	r1, r2
 8001dca:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001dce:	6011      	str	r1, [r2, #0]
  return result;
 8001dd0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	fab2 f282 	clz	r2, r2
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	f002 021f 	and.w	r2, r2, #31
 8001de6:	2101      	movs	r1, #1
 8001de8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d09a      	beq.n	8001d28 <HAL_RCC_OscConfig+0x8b4>
 8001df2:	e063      	b.n	8001ebc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df4:	f7ff f820 	bl	8000e38 <HAL_GetTick>
 8001df8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfc:	e00b      	b.n	8001e16 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f7ff f81b 	bl	8000e38 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e23c      	b.n	8002290 <HAL_RCC_OscConfig+0xe1c>
 8001e16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	fa93 f2a3 	rbit	r2, r3
 8001e28:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e32:	2202      	movs	r2, #2
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	fa93 f2a3 	rbit	r2, r3
 8001e40:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e44:	601a      	str	r2, [r3, #0]
  return result;
 8001e46:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e4a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	f043 0302 	orr.w	r3, r3, #2
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d102      	bne.n	8001e66 <HAL_RCC_OscConfig+0x9f2>
 8001e60:	4b95      	ldr	r3, [pc, #596]	; (80020b8 <HAL_RCC_OscConfig+0xc44>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	e00d      	b.n	8001e82 <HAL_RCC_OscConfig+0xa0e>
 8001e66:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	fa93 f2a3 	rbit	r2, r3
 8001e78:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	4b8e      	ldr	r3, [pc, #568]	; (80020b8 <HAL_RCC_OscConfig+0xc44>)
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001e86:	2102      	movs	r1, #2
 8001e88:	6011      	str	r1, [r2, #0]
 8001e8a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001e8e:	6812      	ldr	r2, [r2, #0]
 8001e90:	fa92 f1a2 	rbit	r1, r2
 8001e94:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e98:	6011      	str	r1, [r2, #0]
  return result;
 8001e9a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001e9e:	6812      	ldr	r2, [r2, #0]
 8001ea0:	fab2 f282 	clz	r2, r2
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	f002 021f 	and.w	r2, r2, #31
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1a0      	bne.n	8001dfe <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ebc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d105      	bne.n	8001ed0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec4:	4b7c      	ldr	r3, [pc, #496]	; (80020b8 <HAL_RCC_OscConfig+0xc44>)
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	4a7b      	ldr	r2, [pc, #492]	; (80020b8 <HAL_RCC_OscConfig+0xc44>)
 8001eca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ece:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 81d9 	beq.w	800228e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001edc:	4b76      	ldr	r3, [pc, #472]	; (80020b8 <HAL_RCC_OscConfig+0xc44>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	f000 81a6 	beq.w	8002236 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	f040 811e 	bne.w	8002132 <HAL_RCC_OscConfig+0xcbe>
 8001ef6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001efa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001efe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	fa93 f2a3 	rbit	r2, r3
 8001f0a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f0e:	601a      	str	r2, [r3, #0]
  return result;
 8001f10:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f14:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	461a      	mov	r2, r3
 8001f28:	2300      	movs	r3, #0
 8001f2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7fe ff84 	bl	8000e38 <HAL_GetTick>
 8001f30:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f34:	e009      	b.n	8001f4a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f36:	f7fe ff7f 	bl	8000e38 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e1a2      	b.n	8002290 <HAL_RCC_OscConfig+0xe1c>
 8001f4a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f54:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	fa93 f2a3 	rbit	r2, r3
 8001f5e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f62:	601a      	str	r2, [r3, #0]
  return result;
 8001f64:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	095b      	lsrs	r3, r3, #5
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d102      	bne.n	8001f84 <HAL_RCC_OscConfig+0xb10>
 8001f7e:	4b4e      	ldr	r3, [pc, #312]	; (80020b8 <HAL_RCC_OscConfig+0xc44>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	e01b      	b.n	8001fbc <HAL_RCC_OscConfig+0xb48>
 8001f84:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	fa93 f2a3 	rbit	r2, r3
 8001f98:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	fa93 f2a3 	rbit	r2, r3
 8001fb2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	4b3f      	ldr	r3, [pc, #252]	; (80020b8 <HAL_RCC_OscConfig+0xc44>)
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001fc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fc4:	6011      	str	r1, [r2, #0]
 8001fc6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	fa92 f1a2 	rbit	r1, r2
 8001fd0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fd4:	6011      	str	r1, [r2, #0]
  return result;
 8001fd6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	fab2 f282 	clz	r2, r2
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	f042 0220 	orr.w	r2, r2, #32
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	f002 021f 	and.w	r2, r2, #31
 8001fec:	2101      	movs	r1, #1
 8001fee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d19e      	bne.n	8001f36 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff8:	4b2f      	ldr	r3, [pc, #188]	; (80020b8 <HAL_RCC_OscConfig+0xc44>)
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	f023 020f 	bic.w	r2, r3, #15
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	492c      	ldr	r1, [pc, #176]	; (80020b8 <HAL_RCC_OscConfig+0xc44>)
 8002008:	4313      	orrs	r3, r2
 800200a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800200c:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <HAL_RCC_OscConfig+0xc44>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6a19      	ldr	r1, [r3, #32]
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	430b      	orrs	r3, r1
 8002022:	4925      	ldr	r1, [pc, #148]	; (80020b8 <HAL_RCC_OscConfig+0xc44>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
 8002028:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800202c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002030:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	fa93 f2a3 	rbit	r2, r3
 800203c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002040:	601a      	str	r2, [r3, #0]
  return result;
 8002042:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002046:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002052:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	461a      	mov	r2, r3
 800205a:	2301      	movs	r3, #1
 800205c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205e:	f7fe feeb 	bl	8000e38 <HAL_GetTick>
 8002062:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002066:	e009      	b.n	800207c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002068:	f7fe fee6 	bl	8000e38 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e109      	b.n	8002290 <HAL_RCC_OscConfig+0xe1c>
 800207c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002080:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002084:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	fa93 f2a3 	rbit	r2, r3
 8002090:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002094:	601a      	str	r2, [r3, #0]
  return result;
 8002096:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800209a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d105      	bne.n	80020bc <HAL_RCC_OscConfig+0xc48>
 80020b0:	4b01      	ldr	r3, [pc, #4]	; (80020b8 <HAL_RCC_OscConfig+0xc44>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	e01e      	b.n	80020f4 <HAL_RCC_OscConfig+0xc80>
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
 80020bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	fa93 f2a3 	rbit	r2, r3
 80020d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	fa93 f2a3 	rbit	r2, r3
 80020ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	4b6a      	ldr	r3, [pc, #424]	; (800229c <HAL_RCC_OscConfig+0xe28>)
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80020f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020fc:	6011      	str	r1, [r2, #0]
 80020fe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	fa92 f1a2 	rbit	r1, r2
 8002108:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800210c:	6011      	str	r1, [r2, #0]
  return result;
 800210e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	fab2 f282 	clz	r2, r2
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	f042 0220 	orr.w	r2, r2, #32
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	f002 021f 	and.w	r2, r2, #31
 8002124:	2101      	movs	r1, #1
 8002126:	fa01 f202 	lsl.w	r2, r1, r2
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d09b      	beq.n	8002068 <HAL_RCC_OscConfig+0xbf4>
 8002130:	e0ad      	b.n	800228e <HAL_RCC_OscConfig+0xe1a>
 8002132:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002136:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800213a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	fa93 f2a3 	rbit	r2, r3
 8002146:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800214a:	601a      	str	r2, [r3, #0]
  return result;
 800214c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002150:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002152:	fab3 f383 	clz	r3, r3
 8002156:	b2db      	uxtb	r3, r3
 8002158:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800215c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	461a      	mov	r2, r3
 8002164:	2300      	movs	r3, #0
 8002166:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7fe fe66 	bl	8000e38 <HAL_GetTick>
 800216c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002170:	e009      	b.n	8002186 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002172:	f7fe fe61 	bl	8000e38 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e084      	b.n	8002290 <HAL_RCC_OscConfig+0xe1c>
 8002186:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800218a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800218e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	fa93 f2a3 	rbit	r2, r3
 800219a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800219e:	601a      	str	r2, [r3, #0]
  return result;
 80021a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a6:	fab3 f383 	clz	r3, r3
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	f043 0301 	orr.w	r3, r3, #1
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d102      	bne.n	80021c0 <HAL_RCC_OscConfig+0xd4c>
 80021ba:	4b38      	ldr	r3, [pc, #224]	; (800229c <HAL_RCC_OscConfig+0xe28>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	e01b      	b.n	80021f8 <HAL_RCC_OscConfig+0xd84>
 80021c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	fa93 f2a3 	rbit	r2, r3
 80021d4:	f107 0320 	add.w	r3, r7, #32
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	f107 031c 	add.w	r3, r7, #28
 80021de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	fa93 f2a3 	rbit	r2, r3
 80021ee:	f107 0318 	add.w	r3, r7, #24
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	4b29      	ldr	r3, [pc, #164]	; (800229c <HAL_RCC_OscConfig+0xe28>)
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	f107 0214 	add.w	r2, r7, #20
 80021fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002200:	6011      	str	r1, [r2, #0]
 8002202:	f107 0214 	add.w	r2, r7, #20
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	fa92 f1a2 	rbit	r1, r2
 800220c:	f107 0210 	add.w	r2, r7, #16
 8002210:	6011      	str	r1, [r2, #0]
  return result;
 8002212:	f107 0210 	add.w	r2, r7, #16
 8002216:	6812      	ldr	r2, [r2, #0]
 8002218:	fab2 f282 	clz	r2, r2
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	f042 0220 	orr.w	r2, r2, #32
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	f002 021f 	and.w	r2, r2, #31
 8002228:	2101      	movs	r1, #1
 800222a:	fa01 f202 	lsl.w	r2, r1, r2
 800222e:	4013      	ands	r3, r2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d19e      	bne.n	8002172 <HAL_RCC_OscConfig+0xcfe>
 8002234:	e02b      	b.n	800228e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e025      	b.n	8002290 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002244:	4b15      	ldr	r3, [pc, #84]	; (800229c <HAL_RCC_OscConfig+0xe28>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800224c:	4b13      	ldr	r3, [pc, #76]	; (800229c <HAL_RCC_OscConfig+0xe28>)
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002254:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002258:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	429a      	cmp	r2, r3
 8002264:	d111      	bne.n	800228a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002266:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800226a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002274:	429a      	cmp	r2, r3
 8002276:	d108      	bne.n	800228a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002278:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800227c:	f003 020f 	and.w	r2, r3, #15
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002286:	429a      	cmp	r2, r3
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e000      	b.n	8002290 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000

080022a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b09e      	sub	sp, #120	; 0x78
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e162      	b.n	800257e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022b8:	4b90      	ldr	r3, [pc, #576]	; (80024fc <HAL_RCC_ClockConfig+0x25c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d910      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c6:	4b8d      	ldr	r3, [pc, #564]	; (80024fc <HAL_RCC_ClockConfig+0x25c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 0207 	bic.w	r2, r3, #7
 80022ce:	498b      	ldr	r1, [pc, #556]	; (80024fc <HAL_RCC_ClockConfig+0x25c>)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b89      	ldr	r3, [pc, #548]	; (80024fc <HAL_RCC_ClockConfig+0x25c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e14a      	b.n	800257e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022f4:	4b82      	ldr	r3, [pc, #520]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	497f      	ldr	r1, [pc, #508]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 8002302:	4313      	orrs	r3, r2
 8002304:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 80dc 	beq.w	80024cc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d13c      	bne.n	8002396 <HAL_RCC_ClockConfig+0xf6>
 800231c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002320:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800232a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232c:	fab3 f383 	clz	r3, r3
 8002330:	b2db      	uxtb	r3, r3
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b01      	cmp	r3, #1
 800233e:	d102      	bne.n	8002346 <HAL_RCC_ClockConfig+0xa6>
 8002340:	4b6f      	ldr	r3, [pc, #444]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	e00f      	b.n	8002366 <HAL_RCC_ClockConfig+0xc6>
 8002346:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800234a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	667b      	str	r3, [r7, #100]	; 0x64
 8002354:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002358:	663b      	str	r3, [r7, #96]	; 0x60
 800235a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800235c:	fa93 f3a3 	rbit	r3, r3
 8002360:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002362:	4b67      	ldr	r3, [pc, #412]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800236a:	65ba      	str	r2, [r7, #88]	; 0x58
 800236c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800236e:	fa92 f2a2 	rbit	r2, r2
 8002372:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002374:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002376:	fab2 f282 	clz	r2, r2
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	f042 0220 	orr.w	r2, r2, #32
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	f002 021f 	and.w	r2, r2, #31
 8002386:	2101      	movs	r1, #1
 8002388:	fa01 f202 	lsl.w	r2, r1, r2
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d17b      	bne.n	800248a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0f3      	b.n	800257e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d13c      	bne.n	8002418 <HAL_RCC_ClockConfig+0x178>
 800239e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	095b      	lsrs	r3, r3, #5
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d102      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x128>
 80023c2:	4b4f      	ldr	r3, [pc, #316]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	e00f      	b.n	80023e8 <HAL_RCC_ClockConfig+0x148>
 80023c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	647b      	str	r3, [r7, #68]	; 0x44
 80023d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023da:	643b      	str	r3, [r7, #64]	; 0x40
 80023dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023de:	fa93 f3a3 	rbit	r3, r3
 80023e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023e4:	4b46      	ldr	r3, [pc, #280]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ec:	63ba      	str	r2, [r7, #56]	; 0x38
 80023ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023f0:	fa92 f2a2 	rbit	r2, r2
 80023f4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80023f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023f8:	fab2 f282 	clz	r2, r2
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	f042 0220 	orr.w	r2, r2, #32
 8002402:	b2d2      	uxtb	r2, r2
 8002404:	f002 021f 	and.w	r2, r2, #31
 8002408:	2101      	movs	r1, #1
 800240a:	fa01 f202 	lsl.w	r2, r1, r2
 800240e:	4013      	ands	r3, r2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d13a      	bne.n	800248a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0b2      	b.n	800257e <HAL_RCC_ClockConfig+0x2de>
 8002418:	2302      	movs	r3, #2
 800241a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241e:	fa93 f3a3 	rbit	r3, r3
 8002422:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002426:	fab3 f383 	clz	r3, r3
 800242a:	b2db      	uxtb	r3, r3
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	b2db      	uxtb	r3, r3
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d102      	bne.n	8002440 <HAL_RCC_ClockConfig+0x1a0>
 800243a:	4b31      	ldr	r3, [pc, #196]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	e00d      	b.n	800245c <HAL_RCC_ClockConfig+0x1bc>
 8002440:	2302      	movs	r3, #2
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
 800244c:	2302      	movs	r3, #2
 800244e:	623b      	str	r3, [r7, #32]
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	4b29      	ldr	r3, [pc, #164]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	2202      	movs	r2, #2
 800245e:	61ba      	str	r2, [r7, #24]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	fa92 f2a2 	rbit	r2, r2
 8002466:	617a      	str	r2, [r7, #20]
  return result;
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	fab2 f282 	clz	r2, r2
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	f042 0220 	orr.w	r2, r2, #32
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	f002 021f 	and.w	r2, r2, #31
 800247a:	2101      	movs	r1, #1
 800247c:	fa01 f202 	lsl.w	r2, r1, r2
 8002480:	4013      	ands	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e079      	b.n	800257e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800248a:	4b1d      	ldr	r3, [pc, #116]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f023 0203 	bic.w	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	491a      	ldr	r1, [pc, #104]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 8002498:	4313      	orrs	r3, r2
 800249a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800249c:	f7fe fccc 	bl	8000e38 <HAL_GetTick>
 80024a0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a2:	e00a      	b.n	80024ba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a4:	f7fe fcc8 	bl	8000e38 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e061      	b.n	800257e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ba:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_RCC_ClockConfig+0x260>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 020c 	and.w	r2, r3, #12
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d1eb      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <HAL_RCC_ClockConfig+0x25c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d214      	bcs.n	8002504 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <HAL_RCC_ClockConfig+0x25c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 0207 	bic.w	r2, r3, #7
 80024e2:	4906      	ldr	r1, [pc, #24]	; (80024fc <HAL_RCC_ClockConfig+0x25c>)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <HAL_RCC_ClockConfig+0x25c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d005      	beq.n	8002504 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e040      	b.n	800257e <HAL_RCC_ClockConfig+0x2de>
 80024fc:	40022000 	.word	0x40022000
 8002500:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002510:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_RCC_ClockConfig+0x2e8>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	491a      	ldr	r1, [pc, #104]	; (8002588 <HAL_RCC_ClockConfig+0x2e8>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800252e:	4b16      	ldr	r3, [pc, #88]	; (8002588 <HAL_RCC_ClockConfig+0x2e8>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4912      	ldr	r1, [pc, #72]	; (8002588 <HAL_RCC_ClockConfig+0x2e8>)
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002542:	f000 f829 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8002546:	4601      	mov	r1, r0
 8002548:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <HAL_RCC_ClockConfig+0x2e8>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002550:	22f0      	movs	r2, #240	; 0xf0
 8002552:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	fa92 f2a2 	rbit	r2, r2
 800255a:	60fa      	str	r2, [r7, #12]
  return result;
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	fab2 f282 	clz	r2, r2
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	40d3      	lsrs	r3, r2
 8002566:	4a09      	ldr	r2, [pc, #36]	; (800258c <HAL_RCC_ClockConfig+0x2ec>)
 8002568:	5cd3      	ldrb	r3, [r2, r3]
 800256a:	fa21 f303 	lsr.w	r3, r1, r3
 800256e:	4a08      	ldr	r2, [pc, #32]	; (8002590 <HAL_RCC_ClockConfig+0x2f0>)
 8002570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002572:	4b08      	ldr	r3, [pc, #32]	; (8002594 <HAL_RCC_ClockConfig+0x2f4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fc1a 	bl	8000db0 <HAL_InitTick>
  
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3778      	adds	r7, #120	; 0x78
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	08004f58 	.word	0x08004f58
 8002590:	20000000 	.word	0x20000000
 8002594:	20000004 	.word	0x20000004

08002598 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002598:	b480      	push	{r7}
 800259a:	b08b      	sub	sp, #44	; 0x2c
 800259c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
 80025a2:	2300      	movs	r3, #0
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	2300      	movs	r3, #0
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80025b2:	4b2a      	ldr	r3, [pc, #168]	; (800265c <HAL_RCC_GetSysClockFreq+0xc4>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d002      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x30>
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d003      	beq.n	80025ce <HAL_RCC_GetSysClockFreq+0x36>
 80025c6:	e03f      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025c8:	4b25      	ldr	r3, [pc, #148]	; (8002660 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025ca:	623b      	str	r3, [r7, #32]
      break;
 80025cc:	e03f      	b.n	800264e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80025d4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80025d8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	fa92 f2a2 	rbit	r2, r2
 80025e0:	607a      	str	r2, [r7, #4]
  return result;
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	fab2 f282 	clz	r2, r2
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	40d3      	lsrs	r3, r2
 80025ec:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025ee:	5cd3      	ldrb	r3, [r2, r3]
 80025f0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <HAL_RCC_GetSysClockFreq+0xc4>)
 80025f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	220f      	movs	r2, #15
 80025fc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	fa92 f2a2 	rbit	r2, r2
 8002604:	60fa      	str	r2, [r7, #12]
  return result;
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	fab2 f282 	clz	r2, r2
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	40d3      	lsrs	r3, r2
 8002610:	4a15      	ldr	r2, [pc, #84]	; (8002668 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002612:	5cd3      	ldrb	r3, [r2, r3]
 8002614:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d008      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002620:	4a0f      	ldr	r2, [pc, #60]	; (8002660 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	fbb2 f2f3 	udiv	r2, r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	fb02 f303 	mul.w	r3, r2, r3
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
 8002630:	e007      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002632:	4a0b      	ldr	r2, [pc, #44]	; (8002660 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fbb2 f2f3 	udiv	r2, r2, r3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	fb02 f303 	mul.w	r3, r2, r3
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	623b      	str	r3, [r7, #32]
      break;
 8002646:	e002      	b.n	800264e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCC_GetSysClockFreq+0xc8>)
 800264a:	623b      	str	r3, [r7, #32]
      break;
 800264c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800264e:	6a3b      	ldr	r3, [r7, #32]
}
 8002650:	4618      	mov	r0, r3
 8002652:	372c      	adds	r7, #44	; 0x2c
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	40021000 	.word	0x40021000
 8002660:	007a1200 	.word	0x007a1200
 8002664:	08004f70 	.word	0x08004f70
 8002668:	08004f80 	.word	0x08004f80

0800266c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <HAL_RCC_GetHCLKFreq+0x14>)
 8002672:	681b      	ldr	r3, [r3, #0]
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000000 	.word	0x20000000

08002684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800268a:	f7ff ffef 	bl	800266c <HAL_RCC_GetHCLKFreq>
 800268e:	4601      	mov	r1, r0
 8002690:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002698:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800269c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	fa92 f2a2 	rbit	r2, r2
 80026a4:	603a      	str	r2, [r7, #0]
  return result;
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	fab2 f282 	clz	r2, r2
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	40d3      	lsrs	r3, r2
 80026b0:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80026b2:	5cd3      	ldrb	r3, [r2, r3]
 80026b4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40021000 	.word	0x40021000
 80026c4:	08004f68 	.word	0x08004f68

080026c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80026ce:	f7ff ffcd 	bl	800266c <HAL_RCC_GetHCLKFreq>
 80026d2:	4601      	mov	r1, r0
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80026dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80026e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	fa92 f2a2 	rbit	r2, r2
 80026e8:	603a      	str	r2, [r7, #0]
  return result;
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	fab2 f282 	clz	r2, r2
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	40d3      	lsrs	r3, r2
 80026f4:	4a04      	ldr	r2, [pc, #16]	; (8002708 <HAL_RCC_GetPCLK2Freq+0x40>)
 80026f6:	5cd3      	ldrb	r3, [r2, r3]
 80026f8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000
 8002708:	08004f68 	.word	0x08004f68

0800270c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b092      	sub	sp, #72	; 0x48
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002714:	2300      	movs	r3, #0
 8002716:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800271c:	2300      	movs	r3, #0
 800271e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80d4 	beq.w	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002730:	4b4e      	ldr	r3, [pc, #312]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10e      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800273c:	4b4b      	ldr	r3, [pc, #300]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	4a4a      	ldr	r2, [pc, #296]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002746:	61d3      	str	r3, [r2, #28]
 8002748:	4b48      	ldr	r3, [pc, #288]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002754:	2301      	movs	r3, #1
 8002756:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800275a:	4b45      	ldr	r3, [pc, #276]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d118      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002766:	4b42      	ldr	r3, [pc, #264]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a41      	ldr	r2, [pc, #260]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800276c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002770:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002772:	f7fe fb61 	bl	8000e38 <HAL_GetTick>
 8002776:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002778:	e008      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800277a:	f7fe fb5d 	bl	8000e38 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b64      	cmp	r3, #100	; 0x64
 8002786:	d901      	bls.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e1d6      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278c:	4b38      	ldr	r3, [pc, #224]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002798:	4b34      	ldr	r3, [pc, #208]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 8084 	beq.w	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d07c      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027b8:	4b2c      	ldr	r3, [pc, #176]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	4b26      	ldr	r3, [pc, #152]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	461a      	mov	r2, r3
 80027e2:	2301      	movs	r3, #1
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80027f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	461a      	mov	r2, r3
 8002806:	2300      	movs	r3, #0
 8002808:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800280a:	4a18      	ldr	r2, [pc, #96]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800280e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d04b      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281a:	f7fe fb0d 	bl	8000e38 <HAL_GetTick>
 800281e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002820:	e00a      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002822:	f7fe fb09 	bl	8000e38 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002830:	4293      	cmp	r3, r2
 8002832:	d901      	bls.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e180      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002838:	2302      	movs	r3, #2
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
 8002844:	2302      	movs	r3, #2
 8002846:	623b      	str	r3, [r7, #32]
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	61fb      	str	r3, [r7, #28]
  return result;
 8002850:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	095b      	lsrs	r3, r3, #5
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f043 0302 	orr.w	r3, r3, #2
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d108      	bne.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002866:	4b01      	ldr	r3, [pc, #4]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	e00d      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800286c:	40021000 	.word	0x40021000
 8002870:	40007000 	.word	0x40007000
 8002874:	10908100 	.word	0x10908100
 8002878:	2302      	movs	r3, #2
 800287a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	4ba0      	ldr	r3, [pc, #640]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	2202      	movs	r2, #2
 800288a:	613a      	str	r2, [r7, #16]
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	fa92 f2a2 	rbit	r2, r2
 8002892:	60fa      	str	r2, [r7, #12]
  return result;
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	fab2 f282 	clz	r2, r2
 800289a:	b2d2      	uxtb	r2, r2
 800289c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	f002 021f 	and.w	r2, r2, #31
 80028a6:	2101      	movs	r1, #1
 80028a8:	fa01 f202 	lsl.w	r2, r1, r2
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0b7      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80028b2:	4b95      	ldr	r3, [pc, #596]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4992      	ldr	r1, [pc, #584]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d105      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028cc:	4b8e      	ldr	r3, [pc, #568]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	4a8d      	ldr	r2, [pc, #564]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d008      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028e4:	4b88      	ldr	r3, [pc, #544]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e8:	f023 0203 	bic.w	r2, r3, #3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4985      	ldr	r1, [pc, #532]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d008      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002902:	4b81      	ldr	r3, [pc, #516]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	497e      	ldr	r1, [pc, #504]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002910:	4313      	orrs	r3, r2
 8002912:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002920:	4b79      	ldr	r3, [pc, #484]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	4976      	ldr	r1, [pc, #472]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800292e:	4313      	orrs	r3, r2
 8002930:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0320 	and.w	r3, r3, #32
 800293a:	2b00      	cmp	r3, #0
 800293c:	d008      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800293e:	4b72      	ldr	r3, [pc, #456]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f023 0210 	bic.w	r2, r3, #16
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	496f      	ldr	r1, [pc, #444]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800294c:	4313      	orrs	r3, r2
 800294e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d008      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800295c:	4b6a      	ldr	r3, [pc, #424]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002968:	4967      	ldr	r1, [pc, #412]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b00      	cmp	r3, #0
 8002978:	d008      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800297a:	4b63      	ldr	r3, [pc, #396]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f023 0220 	bic.w	r2, r3, #32
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	4960      	ldr	r1, [pc, #384]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002988:	4313      	orrs	r3, r2
 800298a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002998:	4b5b      	ldr	r3, [pc, #364]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	4958      	ldr	r1, [pc, #352]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029b6:	4b54      	ldr	r3, [pc, #336]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	4951      	ldr	r1, [pc, #324]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d008      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029d4:	4b4c      	ldr	r3, [pc, #304]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	4949      	ldr	r1, [pc, #292]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029f2:	4b45      	ldr	r3, [pc, #276]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	4942      	ldr	r1, [pc, #264]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a10:	4b3d      	ldr	r3, [pc, #244]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a14:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	493a      	ldr	r1, [pc, #232]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a2e:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	4933      	ldr	r1, [pc, #204]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a4c:	4b2e      	ldr	r3, [pc, #184]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a58:	492b      	ldr	r1, [pc, #172]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d008      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002a6a:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	4924      	ldr	r1, [pc, #144]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d008      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002a88:	4b1f      	ldr	r3, [pc, #124]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a94:	491c      	ldr	r1, [pc, #112]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d008      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002aa6:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	4915      	ldr	r1, [pc, #84]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ac4:	4b10      	ldr	r3, [pc, #64]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	490d      	ldr	r1, [pc, #52]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d008      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aee:	4906      	ldr	r1, [pc, #24]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00c      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002b00:	4b01      	ldr	r3, [pc, #4]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b04:	e002      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b14:	490b      	ldr	r1, [pc, #44]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d008      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002b26:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b32:	4904      	ldr	r1, [pc, #16]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3748      	adds	r7, #72	; 0x48
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000

08002b48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e049      	b.n	8002bee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fd ff4c 	bl	8000a0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3304      	adds	r3, #4
 8002b84:	4619      	mov	r1, r3
 8002b86:	4610      	mov	r0, r2
 8002b88:	f000 fa56 	bl	8003038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <HAL_TIM_PWM_Start+0x24>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e03c      	b.n	8002c96 <HAL_TIM_PWM_Start+0x9e>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d109      	bne.n	8002c36 <HAL_TIM_PWM_Start+0x3e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	bf14      	ite	ne
 8002c2e:	2301      	movne	r3, #1
 8002c30:	2300      	moveq	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	e02f      	b.n	8002c96 <HAL_TIM_PWM_Start+0x9e>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d109      	bne.n	8002c50 <HAL_TIM_PWM_Start+0x58>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	bf14      	ite	ne
 8002c48:	2301      	movne	r3, #1
 8002c4a:	2300      	moveq	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	e022      	b.n	8002c96 <HAL_TIM_PWM_Start+0x9e>
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2b0c      	cmp	r3, #12
 8002c54:	d109      	bne.n	8002c6a <HAL_TIM_PWM_Start+0x72>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	bf14      	ite	ne
 8002c62:	2301      	movne	r3, #1
 8002c64:	2300      	moveq	r3, #0
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	e015      	b.n	8002c96 <HAL_TIM_PWM_Start+0x9e>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b10      	cmp	r3, #16
 8002c6e:	d109      	bne.n	8002c84 <HAL_TIM_PWM_Start+0x8c>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	bf14      	ite	ne
 8002c7c:	2301      	movne	r3, #1
 8002c7e:	2300      	moveq	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	e008      	b.n	8002c96 <HAL_TIM_PWM_Start+0x9e>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	bf14      	ite	ne
 8002c90:	2301      	movne	r3, #1
 8002c92:	2300      	moveq	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0a1      	b.n	8002de2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d104      	bne.n	8002cae <HAL_TIM_PWM_Start+0xb6>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cac:	e023      	b.n	8002cf6 <HAL_TIM_PWM_Start+0xfe>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b04      	cmp	r3, #4
 8002cb2:	d104      	bne.n	8002cbe <HAL_TIM_PWM_Start+0xc6>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cbc:	e01b      	b.n	8002cf6 <HAL_TIM_PWM_Start+0xfe>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b08      	cmp	r3, #8
 8002cc2:	d104      	bne.n	8002cce <HAL_TIM_PWM_Start+0xd6>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ccc:	e013      	b.n	8002cf6 <HAL_TIM_PWM_Start+0xfe>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	d104      	bne.n	8002cde <HAL_TIM_PWM_Start+0xe6>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cdc:	e00b      	b.n	8002cf6 <HAL_TIM_PWM_Start+0xfe>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d104      	bne.n	8002cee <HAL_TIM_PWM_Start+0xf6>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cec:	e003      	b.n	8002cf6 <HAL_TIM_PWM_Start+0xfe>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	6839      	ldr	r1, [r7, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fd3e 	bl	8003780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a38      	ldr	r2, [pc, #224]	; (8002dec <HAL_TIM_PWM_Start+0x1f4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d018      	beq.n	8002d40 <HAL_TIM_PWM_Start+0x148>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a37      	ldr	r2, [pc, #220]	; (8002df0 <HAL_TIM_PWM_Start+0x1f8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d013      	beq.n	8002d40 <HAL_TIM_PWM_Start+0x148>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a35      	ldr	r2, [pc, #212]	; (8002df4 <HAL_TIM_PWM_Start+0x1fc>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00e      	beq.n	8002d40 <HAL_TIM_PWM_Start+0x148>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a34      	ldr	r2, [pc, #208]	; (8002df8 <HAL_TIM_PWM_Start+0x200>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d009      	beq.n	8002d40 <HAL_TIM_PWM_Start+0x148>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a32      	ldr	r2, [pc, #200]	; (8002dfc <HAL_TIM_PWM_Start+0x204>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d004      	beq.n	8002d40 <HAL_TIM_PWM_Start+0x148>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a31      	ldr	r2, [pc, #196]	; (8002e00 <HAL_TIM_PWM_Start+0x208>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d101      	bne.n	8002d44 <HAL_TIM_PWM_Start+0x14c>
 8002d40:	2301      	movs	r3, #1
 8002d42:	e000      	b.n	8002d46 <HAL_TIM_PWM_Start+0x14e>
 8002d44:	2300      	movs	r3, #0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a23      	ldr	r2, [pc, #140]	; (8002dec <HAL_TIM_PWM_Start+0x1f4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d01d      	beq.n	8002da0 <HAL_TIM_PWM_Start+0x1a8>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d6c:	d018      	beq.n	8002da0 <HAL_TIM_PWM_Start+0x1a8>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a24      	ldr	r2, [pc, #144]	; (8002e04 <HAL_TIM_PWM_Start+0x20c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d013      	beq.n	8002da0 <HAL_TIM_PWM_Start+0x1a8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a22      	ldr	r2, [pc, #136]	; (8002e08 <HAL_TIM_PWM_Start+0x210>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00e      	beq.n	8002da0 <HAL_TIM_PWM_Start+0x1a8>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1a      	ldr	r2, [pc, #104]	; (8002df0 <HAL_TIM_PWM_Start+0x1f8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d009      	beq.n	8002da0 <HAL_TIM_PWM_Start+0x1a8>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a18      	ldr	r2, [pc, #96]	; (8002df4 <HAL_TIM_PWM_Start+0x1fc>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d004      	beq.n	8002da0 <HAL_TIM_PWM_Start+0x1a8>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a19      	ldr	r2, [pc, #100]	; (8002e00 <HAL_TIM_PWM_Start+0x208>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d115      	bne.n	8002dcc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <HAL_TIM_PWM_Start+0x214>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b06      	cmp	r3, #6
 8002db0:	d015      	beq.n	8002dde <HAL_TIM_PWM_Start+0x1e6>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db8:	d011      	beq.n	8002dde <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0201 	orr.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dca:	e008      	b.n	8002dde <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	e000      	b.n	8002de0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40012c00 	.word	0x40012c00
 8002df0:	40013400 	.word	0x40013400
 8002df4:	40014000 	.word	0x40014000
 8002df8:	40014400 	.word	0x40014400
 8002dfc:	40014800 	.word	0x40014800
 8002e00:	40015000 	.word	0x40015000
 8002e04:	40000400 	.word	0x40000400
 8002e08:	40000800 	.word	0x40000800
 8002e0c:	00010007 	.word	0x00010007

08002e10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	e0ff      	b.n	800302e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2b14      	cmp	r3, #20
 8002e3a:	f200 80f0 	bhi.w	800301e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002e3e:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002e99 	.word	0x08002e99
 8002e48:	0800301f 	.word	0x0800301f
 8002e4c:	0800301f 	.word	0x0800301f
 8002e50:	0800301f 	.word	0x0800301f
 8002e54:	08002ed9 	.word	0x08002ed9
 8002e58:	0800301f 	.word	0x0800301f
 8002e5c:	0800301f 	.word	0x0800301f
 8002e60:	0800301f 	.word	0x0800301f
 8002e64:	08002f1b 	.word	0x08002f1b
 8002e68:	0800301f 	.word	0x0800301f
 8002e6c:	0800301f 	.word	0x0800301f
 8002e70:	0800301f 	.word	0x0800301f
 8002e74:	08002f5b 	.word	0x08002f5b
 8002e78:	0800301f 	.word	0x0800301f
 8002e7c:	0800301f 	.word	0x0800301f
 8002e80:	0800301f 	.word	0x0800301f
 8002e84:	08002f9d 	.word	0x08002f9d
 8002e88:	0800301f 	.word	0x0800301f
 8002e8c:	0800301f 	.word	0x0800301f
 8002e90:	0800301f 	.word	0x0800301f
 8002e94:	08002fdd 	.word	0x08002fdd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 f968 	bl	8003174 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0208 	orr.w	r2, r2, #8
 8002eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699a      	ldr	r2, [r3, #24]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0204 	bic.w	r2, r2, #4
 8002ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6999      	ldr	r1, [r3, #24]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	619a      	str	r2, [r3, #24]
      break;
 8002ed6:	e0a5      	b.n	8003024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 f9e2 	bl	80032a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699a      	ldr	r2, [r3, #24]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6999      	ldr	r1, [r3, #24]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	021a      	lsls	r2, r3, #8
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	619a      	str	r2, [r3, #24]
      break;
 8002f18:	e084      	b.n	8003024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fa55 	bl	80033d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69da      	ldr	r2, [r3, #28]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0208 	orr.w	r2, r2, #8
 8002f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69da      	ldr	r2, [r3, #28]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0204 	bic.w	r2, r2, #4
 8002f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	69d9      	ldr	r1, [r3, #28]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	61da      	str	r2, [r3, #28]
      break;
 8002f58:	e064      	b.n	8003024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fac7 	bl	80034f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69da      	ldr	r2, [r3, #28]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69d9      	ldr	r1, [r3, #28]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	021a      	lsls	r2, r3, #8
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	61da      	str	r2, [r3, #28]
      break;
 8002f9a:	e043      	b.n	8003024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68b9      	ldr	r1, [r7, #8]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fb16 	bl	80035d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0208 	orr.w	r2, r2, #8
 8002fb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0204 	bic.w	r2, r2, #4
 8002fc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	691a      	ldr	r2, [r3, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002fda:	e023      	b.n	8003024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68b9      	ldr	r1, [r7, #8]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fb60 	bl	80036a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003006:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	021a      	lsls	r2, r3, #8
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800301c:	e002      	b.n	8003024 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	75fb      	strb	r3, [r7, #23]
      break;
 8003022:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800302c:	7dfb      	ldrb	r3, [r7, #23]
}
 800302e:	4618      	mov	r0, r3
 8003030:	3718      	adds	r7, #24
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop

08003038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a42      	ldr	r2, [pc, #264]	; (8003154 <TIM_Base_SetConfig+0x11c>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d013      	beq.n	8003078 <TIM_Base_SetConfig+0x40>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003056:	d00f      	beq.n	8003078 <TIM_Base_SetConfig+0x40>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a3f      	ldr	r2, [pc, #252]	; (8003158 <TIM_Base_SetConfig+0x120>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d00b      	beq.n	8003078 <TIM_Base_SetConfig+0x40>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a3e      	ldr	r2, [pc, #248]	; (800315c <TIM_Base_SetConfig+0x124>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d007      	beq.n	8003078 <TIM_Base_SetConfig+0x40>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a3d      	ldr	r2, [pc, #244]	; (8003160 <TIM_Base_SetConfig+0x128>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d003      	beq.n	8003078 <TIM_Base_SetConfig+0x40>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a3c      	ldr	r2, [pc, #240]	; (8003164 <TIM_Base_SetConfig+0x12c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d108      	bne.n	800308a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a31      	ldr	r2, [pc, #196]	; (8003154 <TIM_Base_SetConfig+0x11c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d01f      	beq.n	80030d2 <TIM_Base_SetConfig+0x9a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003098:	d01b      	beq.n	80030d2 <TIM_Base_SetConfig+0x9a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a2e      	ldr	r2, [pc, #184]	; (8003158 <TIM_Base_SetConfig+0x120>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d017      	beq.n	80030d2 <TIM_Base_SetConfig+0x9a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a2d      	ldr	r2, [pc, #180]	; (800315c <TIM_Base_SetConfig+0x124>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d013      	beq.n	80030d2 <TIM_Base_SetConfig+0x9a>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a2c      	ldr	r2, [pc, #176]	; (8003160 <TIM_Base_SetConfig+0x128>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d00f      	beq.n	80030d2 <TIM_Base_SetConfig+0x9a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a2c      	ldr	r2, [pc, #176]	; (8003168 <TIM_Base_SetConfig+0x130>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00b      	beq.n	80030d2 <TIM_Base_SetConfig+0x9a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a2b      	ldr	r2, [pc, #172]	; (800316c <TIM_Base_SetConfig+0x134>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d007      	beq.n	80030d2 <TIM_Base_SetConfig+0x9a>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a2a      	ldr	r2, [pc, #168]	; (8003170 <TIM_Base_SetConfig+0x138>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d003      	beq.n	80030d2 <TIM_Base_SetConfig+0x9a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a25      	ldr	r2, [pc, #148]	; (8003164 <TIM_Base_SetConfig+0x12c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d108      	bne.n	80030e4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a12      	ldr	r2, [pc, #72]	; (8003154 <TIM_Base_SetConfig+0x11c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d013      	beq.n	8003138 <TIM_Base_SetConfig+0x100>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a13      	ldr	r2, [pc, #76]	; (8003160 <TIM_Base_SetConfig+0x128>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00f      	beq.n	8003138 <TIM_Base_SetConfig+0x100>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a13      	ldr	r2, [pc, #76]	; (8003168 <TIM_Base_SetConfig+0x130>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00b      	beq.n	8003138 <TIM_Base_SetConfig+0x100>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a12      	ldr	r2, [pc, #72]	; (800316c <TIM_Base_SetConfig+0x134>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d007      	beq.n	8003138 <TIM_Base_SetConfig+0x100>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a11      	ldr	r2, [pc, #68]	; (8003170 <TIM_Base_SetConfig+0x138>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d003      	beq.n	8003138 <TIM_Base_SetConfig+0x100>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a0c      	ldr	r2, [pc, #48]	; (8003164 <TIM_Base_SetConfig+0x12c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d103      	bne.n	8003140 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	615a      	str	r2, [r3, #20]
}
 8003146:	bf00      	nop
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	40012c00 	.word	0x40012c00
 8003158:	40000400 	.word	0x40000400
 800315c:	40000800 	.word	0x40000800
 8003160:	40013400 	.word	0x40013400
 8003164:	40015000 	.word	0x40015000
 8003168:	40014000 	.word	0x40014000
 800316c:	40014400 	.word	0x40014400
 8003170:	40014800 	.word	0x40014800

08003174 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f023 0201 	bic.w	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0303 	bic.w	r3, r3, #3
 80031ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f023 0302 	bic.w	r3, r3, #2
 80031c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a30      	ldr	r2, [pc, #192]	; (8003290 <TIM_OC1_SetConfig+0x11c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d013      	beq.n	80031fc <TIM_OC1_SetConfig+0x88>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a2f      	ldr	r2, [pc, #188]	; (8003294 <TIM_OC1_SetConfig+0x120>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00f      	beq.n	80031fc <TIM_OC1_SetConfig+0x88>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a2e      	ldr	r2, [pc, #184]	; (8003298 <TIM_OC1_SetConfig+0x124>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00b      	beq.n	80031fc <TIM_OC1_SetConfig+0x88>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a2d      	ldr	r2, [pc, #180]	; (800329c <TIM_OC1_SetConfig+0x128>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d007      	beq.n	80031fc <TIM_OC1_SetConfig+0x88>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a2c      	ldr	r2, [pc, #176]	; (80032a0 <TIM_OC1_SetConfig+0x12c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d003      	beq.n	80031fc <TIM_OC1_SetConfig+0x88>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a2b      	ldr	r2, [pc, #172]	; (80032a4 <TIM_OC1_SetConfig+0x130>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d10c      	bne.n	8003216 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f023 0308 	bic.w	r3, r3, #8
 8003202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f023 0304 	bic.w	r3, r3, #4
 8003214:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a1d      	ldr	r2, [pc, #116]	; (8003290 <TIM_OC1_SetConfig+0x11c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d013      	beq.n	8003246 <TIM_OC1_SetConfig+0xd2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a1c      	ldr	r2, [pc, #112]	; (8003294 <TIM_OC1_SetConfig+0x120>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d00f      	beq.n	8003246 <TIM_OC1_SetConfig+0xd2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a1b      	ldr	r2, [pc, #108]	; (8003298 <TIM_OC1_SetConfig+0x124>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00b      	beq.n	8003246 <TIM_OC1_SetConfig+0xd2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a1a      	ldr	r2, [pc, #104]	; (800329c <TIM_OC1_SetConfig+0x128>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <TIM_OC1_SetConfig+0xd2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a19      	ldr	r2, [pc, #100]	; (80032a0 <TIM_OC1_SetConfig+0x12c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d003      	beq.n	8003246 <TIM_OC1_SetConfig+0xd2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <TIM_OC1_SetConfig+0x130>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d111      	bne.n	800326a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800324c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	621a      	str	r2, [r3, #32]
}
 8003284:	bf00      	nop
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40012c00 	.word	0x40012c00
 8003294:	40013400 	.word	0x40013400
 8003298:	40014000 	.word	0x40014000
 800329c:	40014400 	.word	0x40014400
 80032a0:	40014800 	.word	0x40014800
 80032a4:	40015000 	.word	0x40015000

080032a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	f023 0210 	bic.w	r2, r3, #16
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f023 0320 	bic.w	r3, r3, #32
 80032f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a2c      	ldr	r2, [pc, #176]	; (80033b8 <TIM_OC2_SetConfig+0x110>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d007      	beq.n	800331c <TIM_OC2_SetConfig+0x74>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a2b      	ldr	r2, [pc, #172]	; (80033bc <TIM_OC2_SetConfig+0x114>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d003      	beq.n	800331c <TIM_OC2_SetConfig+0x74>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a2a      	ldr	r2, [pc, #168]	; (80033c0 <TIM_OC2_SetConfig+0x118>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d10d      	bne.n	8003338 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003336:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a1f      	ldr	r2, [pc, #124]	; (80033b8 <TIM_OC2_SetConfig+0x110>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d013      	beq.n	8003368 <TIM_OC2_SetConfig+0xc0>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <TIM_OC2_SetConfig+0x114>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00f      	beq.n	8003368 <TIM_OC2_SetConfig+0xc0>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a1e      	ldr	r2, [pc, #120]	; (80033c4 <TIM_OC2_SetConfig+0x11c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00b      	beq.n	8003368 <TIM_OC2_SetConfig+0xc0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a1d      	ldr	r2, [pc, #116]	; (80033c8 <TIM_OC2_SetConfig+0x120>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d007      	beq.n	8003368 <TIM_OC2_SetConfig+0xc0>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <TIM_OC2_SetConfig+0x124>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d003      	beq.n	8003368 <TIM_OC2_SetConfig+0xc0>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a17      	ldr	r2, [pc, #92]	; (80033c0 <TIM_OC2_SetConfig+0x118>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d113      	bne.n	8003390 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800336e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003376:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	621a      	str	r2, [r3, #32]
}
 80033aa:	bf00      	nop
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40012c00 	.word	0x40012c00
 80033bc:	40013400 	.word	0x40013400
 80033c0:	40015000 	.word	0x40015000
 80033c4:	40014000 	.word	0x40014000
 80033c8:	40014400 	.word	0x40014400
 80033cc:	40014800 	.word	0x40014800

080033d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0303 	bic.w	r3, r3, #3
 800340a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	4313      	orrs	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800341c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	021b      	lsls	r3, r3, #8
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a2b      	ldr	r2, [pc, #172]	; (80034dc <TIM_OC3_SetConfig+0x10c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d007      	beq.n	8003442 <TIM_OC3_SetConfig+0x72>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a2a      	ldr	r2, [pc, #168]	; (80034e0 <TIM_OC3_SetConfig+0x110>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d003      	beq.n	8003442 <TIM_OC3_SetConfig+0x72>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a29      	ldr	r2, [pc, #164]	; (80034e4 <TIM_OC3_SetConfig+0x114>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d10d      	bne.n	800345e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	021b      	lsls	r3, r3, #8
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800345c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a1e      	ldr	r2, [pc, #120]	; (80034dc <TIM_OC3_SetConfig+0x10c>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d013      	beq.n	800348e <TIM_OC3_SetConfig+0xbe>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a1d      	ldr	r2, [pc, #116]	; (80034e0 <TIM_OC3_SetConfig+0x110>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d00f      	beq.n	800348e <TIM_OC3_SetConfig+0xbe>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a1d      	ldr	r2, [pc, #116]	; (80034e8 <TIM_OC3_SetConfig+0x118>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00b      	beq.n	800348e <TIM_OC3_SetConfig+0xbe>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a1c      	ldr	r2, [pc, #112]	; (80034ec <TIM_OC3_SetConfig+0x11c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d007      	beq.n	800348e <TIM_OC3_SetConfig+0xbe>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a1b      	ldr	r2, [pc, #108]	; (80034f0 <TIM_OC3_SetConfig+0x120>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d003      	beq.n	800348e <TIM_OC3_SetConfig+0xbe>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a16      	ldr	r2, [pc, #88]	; (80034e4 <TIM_OC3_SetConfig+0x114>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d113      	bne.n	80034b6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800349c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	621a      	str	r2, [r3, #32]
}
 80034d0:	bf00      	nop
 80034d2:	371c      	adds	r7, #28
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	40012c00 	.word	0x40012c00
 80034e0:	40013400 	.word	0x40013400
 80034e4:	40015000 	.word	0x40015000
 80034e8:	40014000 	.word	0x40014000
 80034ec:	40014400 	.word	0x40014400
 80034f0:	40014800 	.word	0x40014800

080034f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b087      	sub	sp, #28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	021b      	lsls	r3, r3, #8
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	4313      	orrs	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	031b      	lsls	r3, r3, #12
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a1a      	ldr	r2, [pc, #104]	; (80035bc <TIM_OC4_SetConfig+0xc8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d013      	beq.n	8003580 <TIM_OC4_SetConfig+0x8c>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a19      	ldr	r2, [pc, #100]	; (80035c0 <TIM_OC4_SetConfig+0xcc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d00f      	beq.n	8003580 <TIM_OC4_SetConfig+0x8c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <TIM_OC4_SetConfig+0xd0>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d00b      	beq.n	8003580 <TIM_OC4_SetConfig+0x8c>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a17      	ldr	r2, [pc, #92]	; (80035c8 <TIM_OC4_SetConfig+0xd4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d007      	beq.n	8003580 <TIM_OC4_SetConfig+0x8c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a16      	ldr	r2, [pc, #88]	; (80035cc <TIM_OC4_SetConfig+0xd8>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d003      	beq.n	8003580 <TIM_OC4_SetConfig+0x8c>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a15      	ldr	r2, [pc, #84]	; (80035d0 <TIM_OC4_SetConfig+0xdc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d109      	bne.n	8003594 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003586:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	019b      	lsls	r3, r3, #6
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685a      	ldr	r2, [r3, #4]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	621a      	str	r2, [r3, #32]
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	40012c00 	.word	0x40012c00
 80035c0:	40013400 	.word	0x40013400
 80035c4:	40014000 	.word	0x40014000
 80035c8:	40014400 	.word	0x40014400
 80035cc:	40014800 	.word	0x40014800
 80035d0:	40015000 	.word	0x40015000

080035d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003618:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	041b      	lsls	r3, r3, #16
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a19      	ldr	r2, [pc, #100]	; (8003690 <TIM_OC5_SetConfig+0xbc>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <TIM_OC5_SetConfig+0x82>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a18      	ldr	r2, [pc, #96]	; (8003694 <TIM_OC5_SetConfig+0xc0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00f      	beq.n	8003656 <TIM_OC5_SetConfig+0x82>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a17      	ldr	r2, [pc, #92]	; (8003698 <TIM_OC5_SetConfig+0xc4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00b      	beq.n	8003656 <TIM_OC5_SetConfig+0x82>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a16      	ldr	r2, [pc, #88]	; (800369c <TIM_OC5_SetConfig+0xc8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d007      	beq.n	8003656 <TIM_OC5_SetConfig+0x82>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a15      	ldr	r2, [pc, #84]	; (80036a0 <TIM_OC5_SetConfig+0xcc>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d003      	beq.n	8003656 <TIM_OC5_SetConfig+0x82>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a14      	ldr	r2, [pc, #80]	; (80036a4 <TIM_OC5_SetConfig+0xd0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d109      	bne.n	800366a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	621a      	str	r2, [r3, #32]
}
 8003684:	bf00      	nop
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	40012c00 	.word	0x40012c00
 8003694:	40013400 	.word	0x40013400
 8003698:	40014000 	.word	0x40014000
 800369c:	40014400 	.word	0x40014400
 80036a0:	40014800 	.word	0x40014800
 80036a4:	40015000 	.word	0x40015000

080036a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	021b      	lsls	r3, r3, #8
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	051b      	lsls	r3, r3, #20
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a1a      	ldr	r2, [pc, #104]	; (8003768 <TIM_OC6_SetConfig+0xc0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d013      	beq.n	800372c <TIM_OC6_SetConfig+0x84>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a19      	ldr	r2, [pc, #100]	; (800376c <TIM_OC6_SetConfig+0xc4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00f      	beq.n	800372c <TIM_OC6_SetConfig+0x84>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a18      	ldr	r2, [pc, #96]	; (8003770 <TIM_OC6_SetConfig+0xc8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00b      	beq.n	800372c <TIM_OC6_SetConfig+0x84>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a17      	ldr	r2, [pc, #92]	; (8003774 <TIM_OC6_SetConfig+0xcc>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d007      	beq.n	800372c <TIM_OC6_SetConfig+0x84>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a16      	ldr	r2, [pc, #88]	; (8003778 <TIM_OC6_SetConfig+0xd0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d003      	beq.n	800372c <TIM_OC6_SetConfig+0x84>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a15      	ldr	r2, [pc, #84]	; (800377c <TIM_OC6_SetConfig+0xd4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d109      	bne.n	8003740 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003732:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	029b      	lsls	r3, r3, #10
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	621a      	str	r2, [r3, #32]
}
 800375a:	bf00      	nop
 800375c:	371c      	adds	r7, #28
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40013400 	.word	0x40013400
 8003770:	40014000 	.word	0x40014000
 8003774:	40014400 	.word	0x40014400
 8003778:	40014800 	.word	0x40014800
 800377c:	40015000 	.word	0x40015000

08003780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003780:	b480      	push	{r7}
 8003782:	b087      	sub	sp, #28
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	2201      	movs	r2, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a1a      	ldr	r2, [r3, #32]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	43db      	mvns	r3, r3
 80037a2:	401a      	ands	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a1a      	ldr	r2, [r3, #32]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f003 031f 	and.w	r3, r3, #31
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	fa01 f303 	lsl.w	r3, r1, r3
 80037b8:	431a      	orrs	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	621a      	str	r2, [r3, #32]
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
	...

080037cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b085      	sub	sp, #20
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e06d      	b.n	80038c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a30      	ldr	r2, [pc, #192]	; (80038cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d009      	beq.n	8003822 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a2f      	ldr	r2, [pc, #188]	; (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d004      	beq.n	8003822 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a2d      	ldr	r2, [pc, #180]	; (80038d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d108      	bne.n	8003834 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003828:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	4313      	orrs	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800383a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a1e      	ldr	r2, [pc, #120]	; (80038cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d01d      	beq.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003860:	d018      	beq.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a1c      	ldr	r2, [pc, #112]	; (80038d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d013      	beq.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a1a      	ldr	r2, [pc, #104]	; (80038dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00e      	beq.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a15      	ldr	r2, [pc, #84]	; (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d009      	beq.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a16      	ldr	r2, [pc, #88]	; (80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d004      	beq.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a11      	ldr	r2, [pc, #68]	; (80038d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d10c      	bne.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800389a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40012c00 	.word	0x40012c00
 80038d0:	40013400 	.word	0x40013400
 80038d4:	40015000 	.word	0x40015000
 80038d8:	40000400 	.word	0x40000400
 80038dc:	40000800 	.word	0x40000800
 80038e0:	40014000 	.word	0x40014000

080038e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e06a      	b.n	80039d6 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	041b      	lsls	r3, r3, #16
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a19      	ldr	r2, [pc, #100]	; (80039e4 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d009      	beq.n	8003998 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a17      	ldr	r2, [pc, #92]	; (80039e8 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d004      	beq.n	8003998 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a16      	ldr	r2, [pc, #88]	; (80039ec <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d115      	bne.n	80039c4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	051b      	lsls	r3, r3, #20
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40012c00 	.word	0x40012c00
 80039e8:	40013400 	.word	0x40013400
 80039ec:	40015000 	.word	0x40015000

080039f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e040      	b.n	8003a84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d106      	bne.n	8003a18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7fd f8fa 	bl	8000c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2224      	movs	r2, #36	; 0x24
 8003a1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0201 	bic.w	r2, r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fb78 	bl	8004124 <UART_SetConfig>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d101      	bne.n	8003a3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e022      	b.n	8003a84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fd42 	bl	80044d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 fdc9 	bl	8004614 <UART_CheckIdleState>
 8003a82:	4603      	mov	r3, r0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08a      	sub	sp, #40	; 0x28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	4613      	mov	r3, r2
 8003a98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d13d      	bne.n	8003b1e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_UART_Receive_IT+0x22>
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e036      	b.n	8003b20 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_UART_Receive_IT+0x34>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e02f      	b.n	8003b20 <HAL_UART_Receive_IT+0x94>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d018      	beq.n	8003b0e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	613b      	str	r3, [r7, #16]
   return(result);
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	461a      	mov	r2, r3
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	623b      	str	r3, [r7, #32]
 8003afc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	69f9      	ldr	r1, [r7, #28]
 8003b00:	6a3a      	ldr	r2, [r7, #32]
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e6      	bne.n	8003adc <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003b0e:	88fb      	ldrh	r3, [r7, #6]
 8003b10:	461a      	mov	r2, r3
 8003b12:	68b9      	ldr	r1, [r7, #8]
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 fe8b 	bl	8004830 <UART_Start_Receive_IT>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	e000      	b.n	8003b20 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b1e:	2302      	movs	r3, #2
  }
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3728      	adds	r7, #40	; 0x28
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b0ba      	sub	sp, #232	; 0xe8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003b52:	f640 030f 	movw	r3, #2063	; 0x80f
 8003b56:	4013      	ands	r3, r2
 8003b58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003b5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d115      	bne.n	8003b90 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b68:	f003 0320 	and.w	r3, r3, #32
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00f      	beq.n	8003b90 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b74:	f003 0320 	and.w	r3, r3, #32
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d009      	beq.n	8003b90 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 82a3 	beq.w	80040cc <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	4798      	blx	r3
      }
      return;
 8003b8e:	e29d      	b.n	80040cc <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 8117 	beq.w	8003dc8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d106      	bne.n	8003bb4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003ba6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003baa:	4b85      	ldr	r3, [pc, #532]	; (8003dc0 <HAL_UART_IRQHandler+0x298>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 810a 	beq.w	8003dc8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d011      	beq.n	8003be4 <HAL_UART_IRQHandler+0xbc>
 8003bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00b      	beq.n	8003be4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bda:	f043 0201 	orr.w	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d011      	beq.n	8003c14 <HAL_UART_IRQHandler+0xec>
 8003bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00b      	beq.n	8003c14 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2202      	movs	r2, #2
 8003c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c0a:	f043 0204 	orr.w	r2, r3, #4
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d011      	beq.n	8003c44 <HAL_UART_IRQHandler+0x11c>
 8003c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00b      	beq.n	8003c44 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2204      	movs	r2, #4
 8003c32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c3a:	f043 0202 	orr.w	r2, r3, #2
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d017      	beq.n	8003c80 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d105      	bne.n	8003c68 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c60:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00b      	beq.n	8003c80 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2208      	movs	r2, #8
 8003c6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c76:	f043 0208 	orr.w	r2, r3, #8
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d012      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x18a>
 8003c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00c      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ca0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ca8:	f043 0220 	orr.w	r2, r3, #32
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 8209 	beq.w	80040d0 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d007      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfa:	2b40      	cmp	r3, #64	; 0x40
 8003cfc:	d005      	beq.n	8003d0a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003d02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d04f      	beq.n	8003daa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 fe3c 	bl	8004988 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1a:	2b40      	cmp	r3, #64	; 0x40
 8003d1c:	d141      	bne.n	8003da2 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3308      	adds	r3, #8
 8003d24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3308      	adds	r3, #8
 8003d46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003d4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003d56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1d9      	bne.n	8003d1e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d013      	beq.n	8003d9a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d76:	4a13      	ldr	r2, [pc, #76]	; (8003dc4 <HAL_UART_IRQHandler+0x29c>)
 8003d78:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fd f9b0 	bl	80010e4 <HAL_DMA_Abort_IT>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d017      	beq.n	8003dba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003d94:	4610      	mov	r0, r2
 8003d96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d98:	e00f      	b.n	8003dba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f9ac 	bl	80040f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da0:	e00b      	b.n	8003dba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f9a8 	bl	80040f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da8:	e007      	b.n	8003dba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 f9a4 	bl	80040f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003db8:	e18a      	b.n	80040d0 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dba:	bf00      	nop
    return;
 8003dbc:	e188      	b.n	80040d0 <HAL_UART_IRQHandler+0x5a8>
 8003dbe:	bf00      	nop
 8003dc0:	04000120 	.word	0x04000120
 8003dc4:	08004a4f 	.word	0x08004a4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	f040 8143 	bne.w	8004058 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 813c 	beq.w	8004058 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8135 	beq.w	8004058 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2210      	movs	r2, #16
 8003df4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e00:	2b40      	cmp	r3, #64	; 0x40
 8003e02:	f040 80b1 	bne.w	8003f68 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e12:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 815c 	beq.w	80040d4 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e26:	429a      	cmp	r2, r3
 8003e28:	f080 8154 	bcs.w	80040d4 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003e32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	f000 8085 	beq.w	8003f4c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003e56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003e5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e70:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003e78:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003e84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1da      	bne.n	8003e42 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3308      	adds	r3, #8
 8003e92:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e96:	e853 3f00 	ldrex	r3, [r3]
 8003e9a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003e9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3308      	adds	r3, #8
 8003eac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003eb0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003eb4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003eb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ebc:	e841 2300 	strex	r3, r2, [r1]
 8003ec0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d1e1      	bne.n	8003e8c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3308      	adds	r3, #8
 8003ece:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ed2:	e853 3f00 	ldrex	r3, [r3]
 8003ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003ed8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ede:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003eec:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003eee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ef2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003ef4:	e841 2300 	strex	r3, r2, [r1]
 8003ef8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003efa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1e3      	bne.n	8003ec8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2220      	movs	r2, #32
 8003f04:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f14:	e853 3f00 	ldrex	r3, [r3]
 8003f18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f1c:	f023 0310 	bic.w	r3, r3, #16
 8003f20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f30:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003f34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f36:	e841 2300 	strex	r3, r2, [r1]
 8003f3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1e4      	bne.n	8003f0c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fd f893 	bl	8001072 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	4619      	mov	r1, r3
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f8d3 	bl	800410c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f66:	e0b5      	b.n	80040d4 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 80a7 	beq.w	80040d8 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003f8a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 80a2 	beq.w	80040d8 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fb8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fbe:	e841 2300 	strex	r3, r2, [r1]
 8003fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e4      	bne.n	8003f94 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3308      	adds	r3, #8
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	623b      	str	r3, [r7, #32]
   return(result);
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	f023 0301 	bic.w	r3, r3, #1
 8003fe0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3308      	adds	r3, #8
 8003fea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003fee:	633a      	str	r2, [r7, #48]	; 0x30
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ff6:	e841 2300 	strex	r3, r2, [r1]
 8003ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e3      	bne.n	8003fca <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	60fb      	str	r3, [r7, #12]
   return(result);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f023 0310 	bic.w	r3, r3, #16
 8004028:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004036:	61fb      	str	r3, [r7, #28]
 8004038:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	69b9      	ldr	r1, [r7, #24]
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	e841 2300 	strex	r3, r2, [r1]
 8004042:	617b      	str	r3, [r7, #20]
   return(result);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1e4      	bne.n	8004014 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800404a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800404e:	4619      	mov	r1, r3
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f85b 	bl	800410c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004056:	e03f      	b.n	80040d8 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800405c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00e      	beq.n	8004082 <HAL_UART_IRQHandler+0x55a>
 8004064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004068:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004078:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fe83 	bl	8004d86 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004080:	e02d      	b.n	80040de <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00e      	beq.n	80040ac <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800408e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004096:	2b00      	cmp	r3, #0
 8004098:	d008      	beq.n	80040ac <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d01c      	beq.n	80040dc <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
    }
    return;
 80040aa:	e017      	b.n	80040dc <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d012      	beq.n	80040de <HAL_UART_IRQHandler+0x5b6>
 80040b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00c      	beq.n	80040de <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 fcd8 	bl	8004a7a <UART_EndTransmit_IT>
    return;
 80040ca:	e008      	b.n	80040de <HAL_UART_IRQHandler+0x5b6>
      return;
 80040cc:	bf00      	nop
 80040ce:	e006      	b.n	80040de <HAL_UART_IRQHandler+0x5b6>
    return;
 80040d0:	bf00      	nop
 80040d2:	e004      	b.n	80040de <HAL_UART_IRQHandler+0x5b6>
      return;
 80040d4:	bf00      	nop
 80040d6:	e002      	b.n	80040de <HAL_UART_IRQHandler+0x5b6>
      return;
 80040d8:	bf00      	nop
 80040da:	e000      	b.n	80040de <HAL_UART_IRQHandler+0x5b6>
    return;
 80040dc:	bf00      	nop
  }

}
 80040de:	37e8      	adds	r7, #232	; 0xe8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800412c:	2300      	movs	r3, #0
 800412e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	431a      	orrs	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	4bab      	ldr	r3, [pc, #684]	; (80043fc <UART_SetConfig+0x2d8>)
 8004150:	4013      	ands	r3, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	6979      	ldr	r1, [r7, #20]
 8004158:	430b      	orrs	r3, r1
 800415a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	430a      	orrs	r2, r1
 8004194:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a99      	ldr	r2, [pc, #612]	; (8004400 <UART_SetConfig+0x2dc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d120      	bne.n	80041e2 <UART_SetConfig+0xbe>
 80041a0:	4b98      	ldr	r3, [pc, #608]	; (8004404 <UART_SetConfig+0x2e0>)
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d817      	bhi.n	80041dc <UART_SetConfig+0xb8>
 80041ac:	a201      	add	r2, pc, #4	; (adr r2, 80041b4 <UART_SetConfig+0x90>)
 80041ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b2:	bf00      	nop
 80041b4:	080041c5 	.word	0x080041c5
 80041b8:	080041d1 	.word	0x080041d1
 80041bc:	080041d7 	.word	0x080041d7
 80041c0:	080041cb 	.word	0x080041cb
 80041c4:	2301      	movs	r3, #1
 80041c6:	77fb      	strb	r3, [r7, #31]
 80041c8:	e0b5      	b.n	8004336 <UART_SetConfig+0x212>
 80041ca:	2302      	movs	r3, #2
 80041cc:	77fb      	strb	r3, [r7, #31]
 80041ce:	e0b2      	b.n	8004336 <UART_SetConfig+0x212>
 80041d0:	2304      	movs	r3, #4
 80041d2:	77fb      	strb	r3, [r7, #31]
 80041d4:	e0af      	b.n	8004336 <UART_SetConfig+0x212>
 80041d6:	2308      	movs	r3, #8
 80041d8:	77fb      	strb	r3, [r7, #31]
 80041da:	e0ac      	b.n	8004336 <UART_SetConfig+0x212>
 80041dc:	2310      	movs	r3, #16
 80041de:	77fb      	strb	r3, [r7, #31]
 80041e0:	e0a9      	b.n	8004336 <UART_SetConfig+0x212>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a88      	ldr	r2, [pc, #544]	; (8004408 <UART_SetConfig+0x2e4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d124      	bne.n	8004236 <UART_SetConfig+0x112>
 80041ec:	4b85      	ldr	r3, [pc, #532]	; (8004404 <UART_SetConfig+0x2e0>)
 80041ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80041f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041f8:	d011      	beq.n	800421e <UART_SetConfig+0xfa>
 80041fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041fe:	d817      	bhi.n	8004230 <UART_SetConfig+0x10c>
 8004200:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004204:	d011      	beq.n	800422a <UART_SetConfig+0x106>
 8004206:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800420a:	d811      	bhi.n	8004230 <UART_SetConfig+0x10c>
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <UART_SetConfig+0xf4>
 8004210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004214:	d006      	beq.n	8004224 <UART_SetConfig+0x100>
 8004216:	e00b      	b.n	8004230 <UART_SetConfig+0x10c>
 8004218:	2300      	movs	r3, #0
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e08b      	b.n	8004336 <UART_SetConfig+0x212>
 800421e:	2302      	movs	r3, #2
 8004220:	77fb      	strb	r3, [r7, #31]
 8004222:	e088      	b.n	8004336 <UART_SetConfig+0x212>
 8004224:	2304      	movs	r3, #4
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e085      	b.n	8004336 <UART_SetConfig+0x212>
 800422a:	2308      	movs	r3, #8
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	e082      	b.n	8004336 <UART_SetConfig+0x212>
 8004230:	2310      	movs	r3, #16
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e07f      	b.n	8004336 <UART_SetConfig+0x212>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a74      	ldr	r2, [pc, #464]	; (800440c <UART_SetConfig+0x2e8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d124      	bne.n	800428a <UART_SetConfig+0x166>
 8004240:	4b70      	ldr	r3, [pc, #448]	; (8004404 <UART_SetConfig+0x2e0>)
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004248:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800424c:	d011      	beq.n	8004272 <UART_SetConfig+0x14e>
 800424e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004252:	d817      	bhi.n	8004284 <UART_SetConfig+0x160>
 8004254:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004258:	d011      	beq.n	800427e <UART_SetConfig+0x15a>
 800425a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800425e:	d811      	bhi.n	8004284 <UART_SetConfig+0x160>
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <UART_SetConfig+0x148>
 8004264:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004268:	d006      	beq.n	8004278 <UART_SetConfig+0x154>
 800426a:	e00b      	b.n	8004284 <UART_SetConfig+0x160>
 800426c:	2300      	movs	r3, #0
 800426e:	77fb      	strb	r3, [r7, #31]
 8004270:	e061      	b.n	8004336 <UART_SetConfig+0x212>
 8004272:	2302      	movs	r3, #2
 8004274:	77fb      	strb	r3, [r7, #31]
 8004276:	e05e      	b.n	8004336 <UART_SetConfig+0x212>
 8004278:	2304      	movs	r3, #4
 800427a:	77fb      	strb	r3, [r7, #31]
 800427c:	e05b      	b.n	8004336 <UART_SetConfig+0x212>
 800427e:	2308      	movs	r3, #8
 8004280:	77fb      	strb	r3, [r7, #31]
 8004282:	e058      	b.n	8004336 <UART_SetConfig+0x212>
 8004284:	2310      	movs	r3, #16
 8004286:	77fb      	strb	r3, [r7, #31]
 8004288:	e055      	b.n	8004336 <UART_SetConfig+0x212>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a60      	ldr	r2, [pc, #384]	; (8004410 <UART_SetConfig+0x2ec>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d124      	bne.n	80042de <UART_SetConfig+0x1ba>
 8004294:	4b5b      	ldr	r3, [pc, #364]	; (8004404 <UART_SetConfig+0x2e0>)
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800429c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042a0:	d011      	beq.n	80042c6 <UART_SetConfig+0x1a2>
 80042a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042a6:	d817      	bhi.n	80042d8 <UART_SetConfig+0x1b4>
 80042a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042ac:	d011      	beq.n	80042d2 <UART_SetConfig+0x1ae>
 80042ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042b2:	d811      	bhi.n	80042d8 <UART_SetConfig+0x1b4>
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <UART_SetConfig+0x19c>
 80042b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042bc:	d006      	beq.n	80042cc <UART_SetConfig+0x1a8>
 80042be:	e00b      	b.n	80042d8 <UART_SetConfig+0x1b4>
 80042c0:	2300      	movs	r3, #0
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e037      	b.n	8004336 <UART_SetConfig+0x212>
 80042c6:	2302      	movs	r3, #2
 80042c8:	77fb      	strb	r3, [r7, #31]
 80042ca:	e034      	b.n	8004336 <UART_SetConfig+0x212>
 80042cc:	2304      	movs	r3, #4
 80042ce:	77fb      	strb	r3, [r7, #31]
 80042d0:	e031      	b.n	8004336 <UART_SetConfig+0x212>
 80042d2:	2308      	movs	r3, #8
 80042d4:	77fb      	strb	r3, [r7, #31]
 80042d6:	e02e      	b.n	8004336 <UART_SetConfig+0x212>
 80042d8:	2310      	movs	r3, #16
 80042da:	77fb      	strb	r3, [r7, #31]
 80042dc:	e02b      	b.n	8004336 <UART_SetConfig+0x212>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a4c      	ldr	r2, [pc, #304]	; (8004414 <UART_SetConfig+0x2f0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d124      	bne.n	8004332 <UART_SetConfig+0x20e>
 80042e8:	4b46      	ldr	r3, [pc, #280]	; (8004404 <UART_SetConfig+0x2e0>)
 80042ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ec:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80042f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042f4:	d011      	beq.n	800431a <UART_SetConfig+0x1f6>
 80042f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042fa:	d817      	bhi.n	800432c <UART_SetConfig+0x208>
 80042fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004300:	d011      	beq.n	8004326 <UART_SetConfig+0x202>
 8004302:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004306:	d811      	bhi.n	800432c <UART_SetConfig+0x208>
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <UART_SetConfig+0x1f0>
 800430c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004310:	d006      	beq.n	8004320 <UART_SetConfig+0x1fc>
 8004312:	e00b      	b.n	800432c <UART_SetConfig+0x208>
 8004314:	2300      	movs	r3, #0
 8004316:	77fb      	strb	r3, [r7, #31]
 8004318:	e00d      	b.n	8004336 <UART_SetConfig+0x212>
 800431a:	2302      	movs	r3, #2
 800431c:	77fb      	strb	r3, [r7, #31]
 800431e:	e00a      	b.n	8004336 <UART_SetConfig+0x212>
 8004320:	2304      	movs	r3, #4
 8004322:	77fb      	strb	r3, [r7, #31]
 8004324:	e007      	b.n	8004336 <UART_SetConfig+0x212>
 8004326:	2308      	movs	r3, #8
 8004328:	77fb      	strb	r3, [r7, #31]
 800432a:	e004      	b.n	8004336 <UART_SetConfig+0x212>
 800432c:	2310      	movs	r3, #16
 800432e:	77fb      	strb	r3, [r7, #31]
 8004330:	e001      	b.n	8004336 <UART_SetConfig+0x212>
 8004332:	2310      	movs	r3, #16
 8004334:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800433e:	d16d      	bne.n	800441c <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8004340:	7ffb      	ldrb	r3, [r7, #31]
 8004342:	2b08      	cmp	r3, #8
 8004344:	d827      	bhi.n	8004396 <UART_SetConfig+0x272>
 8004346:	a201      	add	r2, pc, #4	; (adr r2, 800434c <UART_SetConfig+0x228>)
 8004348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434c:	08004371 	.word	0x08004371
 8004350:	08004379 	.word	0x08004379
 8004354:	08004381 	.word	0x08004381
 8004358:	08004397 	.word	0x08004397
 800435c:	08004387 	.word	0x08004387
 8004360:	08004397 	.word	0x08004397
 8004364:	08004397 	.word	0x08004397
 8004368:	08004397 	.word	0x08004397
 800436c:	0800438f 	.word	0x0800438f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004370:	f7fe f988 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 8004374:	61b8      	str	r0, [r7, #24]
        break;
 8004376:	e013      	b.n	80043a0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004378:	f7fe f9a6 	bl	80026c8 <HAL_RCC_GetPCLK2Freq>
 800437c:	61b8      	str	r0, [r7, #24]
        break;
 800437e:	e00f      	b.n	80043a0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004380:	4b25      	ldr	r3, [pc, #148]	; (8004418 <UART_SetConfig+0x2f4>)
 8004382:	61bb      	str	r3, [r7, #24]
        break;
 8004384:	e00c      	b.n	80043a0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004386:	f7fe f907 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 800438a:	61b8      	str	r0, [r7, #24]
        break;
 800438c:	e008      	b.n	80043a0 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800438e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004392:	61bb      	str	r3, [r7, #24]
        break;
 8004394:	e004      	b.n	80043a0 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	77bb      	strb	r3, [r7, #30]
        break;
 800439e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 8086 	beq.w	80044b4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	005a      	lsls	r2, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	441a      	add	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	b29b      	uxth	r3, r3
 80043be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	2b0f      	cmp	r3, #15
 80043c4:	d916      	bls.n	80043f4 <UART_SetConfig+0x2d0>
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043cc:	d212      	bcs.n	80043f4 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	f023 030f 	bic.w	r3, r3, #15
 80043d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	b29b      	uxth	r3, r3
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	89fb      	ldrh	r3, [r7, #14]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	89fa      	ldrh	r2, [r7, #14]
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	e05f      	b.n	80044b4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	77bb      	strb	r3, [r7, #30]
 80043f8:	e05c      	b.n	80044b4 <UART_SetConfig+0x390>
 80043fa:	bf00      	nop
 80043fc:	efff69f3 	.word	0xefff69f3
 8004400:	40013800 	.word	0x40013800
 8004404:	40021000 	.word	0x40021000
 8004408:	40004400 	.word	0x40004400
 800440c:	40004800 	.word	0x40004800
 8004410:	40004c00 	.word	0x40004c00
 8004414:	40005000 	.word	0x40005000
 8004418:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 800441c:	7ffb      	ldrb	r3, [r7, #31]
 800441e:	2b08      	cmp	r3, #8
 8004420:	d827      	bhi.n	8004472 <UART_SetConfig+0x34e>
 8004422:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <UART_SetConfig+0x304>)
 8004424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004428:	0800444d 	.word	0x0800444d
 800442c:	08004455 	.word	0x08004455
 8004430:	0800445d 	.word	0x0800445d
 8004434:	08004473 	.word	0x08004473
 8004438:	08004463 	.word	0x08004463
 800443c:	08004473 	.word	0x08004473
 8004440:	08004473 	.word	0x08004473
 8004444:	08004473 	.word	0x08004473
 8004448:	0800446b 	.word	0x0800446b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800444c:	f7fe f91a 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 8004450:	61b8      	str	r0, [r7, #24]
        break;
 8004452:	e013      	b.n	800447c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004454:	f7fe f938 	bl	80026c8 <HAL_RCC_GetPCLK2Freq>
 8004458:	61b8      	str	r0, [r7, #24]
        break;
 800445a:	e00f      	b.n	800447c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800445c:	4b1b      	ldr	r3, [pc, #108]	; (80044cc <UART_SetConfig+0x3a8>)
 800445e:	61bb      	str	r3, [r7, #24]
        break;
 8004460:	e00c      	b.n	800447c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004462:	f7fe f899 	bl	8002598 <HAL_RCC_GetSysClockFreq>
 8004466:	61b8      	str	r0, [r7, #24]
        break;
 8004468:	e008      	b.n	800447c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800446e:	61bb      	str	r3, [r7, #24]
        break;
 8004470:	e004      	b.n	800447c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	77bb      	strb	r3, [r7, #30]
        break;
 800447a:	bf00      	nop
    }

    if (pclk != 0U)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d018      	beq.n	80044b4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	085a      	lsrs	r2, r3, #1
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	441a      	add	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	fbb2 f3f3 	udiv	r3, r2, r3
 8004494:	b29b      	uxth	r3, r3
 8004496:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b0f      	cmp	r3, #15
 800449c:	d908      	bls.n	80044b0 <UART_SetConfig+0x38c>
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a4:	d204      	bcs.n	80044b0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	60da      	str	r2, [r3, #12]
 80044ae:	e001      	b.n	80044b4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80044c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3720      	adds	r7, #32
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	007a1200 	.word	0x007a1200

080044d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00a      	beq.n	80044fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00a      	beq.n	800451c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00a      	beq.n	8004582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d01a      	beq.n	80045e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ce:	d10a      	bne.n	80045e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	605a      	str	r2, [r3, #4]
  }
}
 8004608:	bf00      	nop
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af02      	add	r7, sp, #8
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004624:	f7fc fc08 	bl	8000e38 <HAL_GetTick>
 8004628:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b08      	cmp	r3, #8
 8004636:	d10e      	bne.n	8004656 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004638:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f82d 	bl	80046a6 <UART_WaitOnFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e023      	b.n	800469e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b04      	cmp	r3, #4
 8004662:	d10e      	bne.n	8004682 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f817 	bl	80046a6 <UART_WaitOnFlagUntilTimeout>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e00d      	b.n	800469e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b09c      	sub	sp, #112	; 0x70
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	603b      	str	r3, [r7, #0]
 80046b2:	4613      	mov	r3, r2
 80046b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b6:	e0a5      	b.n	8004804 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046be:	f000 80a1 	beq.w	8004804 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c2:	f7fc fbb9 	bl	8000e38 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d302      	bcc.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80046d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d13e      	bne.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046e0:	e853 3f00 	ldrex	r3, [r3]
 80046e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046ec:	667b      	str	r3, [r7, #100]	; 0x64
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	461a      	mov	r2, r3
 80046f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046fe:	e841 2300 	strex	r3, r2, [r1]
 8004702:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1e6      	bne.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3308      	adds	r3, #8
 8004710:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	663b      	str	r3, [r7, #96]	; 0x60
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3308      	adds	r3, #8
 8004728:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800472a:	64ba      	str	r2, [r7, #72]	; 0x48
 800472c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004730:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e5      	bne.n	800470a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2220      	movs	r2, #32
 8004742:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2220      	movs	r2, #32
 8004748:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e067      	b.n	8004826 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0304 	and.w	r3, r3, #4
 8004760:	2b00      	cmp	r3, #0
 8004762:	d04f      	beq.n	8004804 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800476e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004772:	d147      	bne.n	8004804 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800477c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004792:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	461a      	mov	r2, r3
 800479a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
 800479e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e6      	bne.n	800477e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3308      	adds	r3, #8
 80047b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	613b      	str	r3, [r7, #16]
   return(result);
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3308      	adds	r3, #8
 80047ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047d0:	623a      	str	r2, [r7, #32]
 80047d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	69f9      	ldr	r1, [r7, #28]
 80047d6:	6a3a      	ldr	r2, [r7, #32]
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e5      	bne.n	80047b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e010      	b.n	8004826 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69da      	ldr	r2, [r3, #28]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4013      	ands	r3, r2
 800480e:	68ba      	ldr	r2, [r7, #8]
 8004810:	429a      	cmp	r2, r3
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	429a      	cmp	r2, r3
 8004820:	f43f af4a 	beq.w	80046b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3770      	adds	r7, #112	; 0x70
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004830:	b480      	push	{r7}
 8004832:	b091      	sub	sp, #68	; 0x44
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	4613      	mov	r3, r2
 800483c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	88fa      	ldrh	r2, [r7, #6]
 8004848:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	88fa      	ldrh	r2, [r7, #6]
 8004850:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004862:	d10e      	bne.n	8004882 <UART_Start_Receive_IT+0x52>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d105      	bne.n	8004878 <UART_Start_Receive_IT+0x48>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004872:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004876:	e02d      	b.n	80048d4 <UART_Start_Receive_IT+0xa4>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	22ff      	movs	r2, #255	; 0xff
 800487c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004880:	e028      	b.n	80048d4 <UART_Start_Receive_IT+0xa4>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10d      	bne.n	80048a6 <UART_Start_Receive_IT+0x76>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d104      	bne.n	800489c <UART_Start_Receive_IT+0x6c>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	22ff      	movs	r2, #255	; 0xff
 8004896:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800489a:	e01b      	b.n	80048d4 <UART_Start_Receive_IT+0xa4>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	227f      	movs	r2, #127	; 0x7f
 80048a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048a4:	e016      	b.n	80048d4 <UART_Start_Receive_IT+0xa4>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048ae:	d10d      	bne.n	80048cc <UART_Start_Receive_IT+0x9c>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d104      	bne.n	80048c2 <UART_Start_Receive_IT+0x92>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	227f      	movs	r2, #127	; 0x7f
 80048bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048c0:	e008      	b.n	80048d4 <UART_Start_Receive_IT+0xa4>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	223f      	movs	r2, #63	; 0x3f
 80048c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80048ca:	e003      	b.n	80048d4 <UART_Start_Receive_IT+0xa4>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2222      	movs	r2, #34	; 0x22
 80048e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3308      	adds	r3, #8
 80048e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	f043 0301 	orr.w	r3, r3, #1
 80048f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3308      	adds	r3, #8
 8004900:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004902:	637a      	str	r2, [r7, #52]	; 0x34
 8004904:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004908:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e5      	bne.n	80048e2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491e:	d107      	bne.n	8004930 <UART_Start_Receive_IT+0x100>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d103      	bne.n	8004930 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4a15      	ldr	r2, [pc, #84]	; (8004980 <UART_Start_Receive_IT+0x150>)
 800492c:	665a      	str	r2, [r3, #100]	; 0x64
 800492e:	e002      	b.n	8004936 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4a14      	ldr	r2, [pc, #80]	; (8004984 <UART_Start_Receive_IT+0x154>)
 8004934:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	613b      	str	r3, [r7, #16]
   return(result);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004952:	63bb      	str	r3, [r7, #56]	; 0x38
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495c:	623b      	str	r3, [r7, #32]
 800495e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	69f9      	ldr	r1, [r7, #28]
 8004962:	6a3a      	ldr	r2, [r7, #32]
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	61bb      	str	r3, [r7, #24]
   return(result);
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e6      	bne.n	800493e <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3744      	adds	r7, #68	; 0x44
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	08004c2b 	.word	0x08004c2b
 8004984:	08004acf 	.word	0x08004acf

08004988 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004988:	b480      	push	{r7}
 800498a:	b095      	sub	sp, #84	; 0x54
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ae:	643b      	str	r3, [r7, #64]	; 0x40
 80049b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e6      	bne.n	8004990 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3308      	adds	r3, #8
 80049c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	f023 0301 	bic.w	r3, r3, #1
 80049d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3308      	adds	r3, #8
 80049e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e5      	bne.n	80049c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d118      	bne.n	8004a30 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	e853 3f00 	ldrex	r3, [r3]
 8004a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f023 0310 	bic.w	r3, r3, #16
 8004a12:	647b      	str	r3, [r7, #68]	; 0x44
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	6979      	ldr	r1, [r7, #20]
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	613b      	str	r3, [r7, #16]
   return(result);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e6      	bne.n	80049fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004a42:	bf00      	nop
 8004a44:	3754      	adds	r7, #84	; 0x54
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff fb43 	bl	80040f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b088      	sub	sp, #32
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	61bb      	str	r3, [r7, #24]
 8004aa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	6979      	ldr	r1, [r7, #20]
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	613b      	str	r3, [r7, #16]
   return(result);
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e6      	bne.n	8004a82 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7ff fb0f 	bl	80040e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ac6:	bf00      	nop
 8004ac8:	3720      	adds	r7, #32
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b096      	sub	sp, #88	; 0x58
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004adc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae4:	2b22      	cmp	r3, #34	; 0x22
 8004ae6:	f040 8094 	bne.w	8004c12 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004af0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004af4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004af8:	b2d9      	uxtb	r1, r3
 8004afa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b04:	400a      	ands	r2, r1
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d177      	bne.n	8004c22 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3a:	e853 3f00 	ldrex	r3, [r3]
 8004b3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b46:	653b      	str	r3, [r7, #80]	; 0x50
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b50:	647b      	str	r3, [r7, #68]	; 0x44
 8004b52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b58:	e841 2300 	strex	r3, r2, [r1]
 8004b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e6      	bne.n	8004b32 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3308      	adds	r3, #8
 8004b6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	e853 3f00 	ldrex	r3, [r3]
 8004b72:	623b      	str	r3, [r7, #32]
   return(result);
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	f023 0301 	bic.w	r3, r3, #1
 8004b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3308      	adds	r3, #8
 8004b82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b84:	633a      	str	r2, [r7, #48]	; 0x30
 8004b86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b8c:	e841 2300 	strex	r3, r2, [r1]
 8004b90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e5      	bne.n	8004b64 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d12e      	bne.n	8004c0a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0310 	bic.w	r3, r3, #16
 8004bc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	461a      	mov	r2, r3
 8004bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd0:	61fb      	str	r3, [r7, #28]
 8004bd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd4:	69b9      	ldr	r1, [r7, #24]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	e841 2300 	strex	r3, r2, [r1]
 8004bdc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1e6      	bne.n	8004bb2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f003 0310 	and.w	r3, r3, #16
 8004bee:	2b10      	cmp	r3, #16
 8004bf0:	d103      	bne.n	8004bfa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2210      	movs	r2, #16
 8004bf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004c00:	4619      	mov	r1, r3
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff fa82 	bl	800410c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004c08:	e00b      	b.n	8004c22 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f7fb fb6e 	bl	80002ec <HAL_UART_RxCpltCallback>
}
 8004c10:	e007      	b.n	8004c22 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699a      	ldr	r2, [r3, #24]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 0208 	orr.w	r2, r2, #8
 8004c20:	619a      	str	r2, [r3, #24]
}
 8004c22:	bf00      	nop
 8004c24:	3758      	adds	r7, #88	; 0x58
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b096      	sub	sp, #88	; 0x58
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004c38:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c40:	2b22      	cmp	r3, #34	; 0x22
 8004c42:	f040 8094 	bne.w	8004d6e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004c4c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c54:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004c56:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004c5a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004c5e:	4013      	ands	r3, r2
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c64:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6a:	1c9a      	adds	r2, r3, #2
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d177      	bne.n	8004d7e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c96:	e853 3f00 	ldrex	r3, [r3]
 8004c9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cac:	643b      	str	r3, [r7, #64]	; 0x40
 8004cae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cb4:	e841 2300 	strex	r3, r2, [r1]
 8004cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1e6      	bne.n	8004c8e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f023 0301 	bic.w	r3, r3, #1
 8004cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3308      	adds	r3, #8
 8004cde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ce0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e5      	bne.n	8004cc0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d12e      	bne.n	8004d66 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f023 0310 	bic.w	r3, r3, #16
 8004d22:	647b      	str	r3, [r7, #68]	; 0x44
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d2c:	61bb      	str	r3, [r7, #24]
 8004d2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6979      	ldr	r1, [r7, #20]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	613b      	str	r3, [r7, #16]
   return(result);
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e6      	bne.n	8004d0e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2b10      	cmp	r3, #16
 8004d4c:	d103      	bne.n	8004d56 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2210      	movs	r2, #16
 8004d54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff f9d4 	bl	800410c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004d64:	e00b      	b.n	8004d7e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7fb fac0 	bl	80002ec <HAL_UART_RxCpltCallback>
}
 8004d6c:	e007      	b.n	8004d7e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699a      	ldr	r2, [r3, #24]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0208 	orr.w	r2, r2, #8
 8004d7c:	619a      	str	r2, [r3, #24]
}
 8004d7e:	bf00      	nop
 8004d80:	3758      	adds	r7, #88	; 0x58
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <atoi>:
 8004d9a:	220a      	movs	r2, #10
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	f000 b8c5 	b.w	8004f2c <strtol>
	...

08004da4 <__errno>:
 8004da4:	4b01      	ldr	r3, [pc, #4]	; (8004dac <__errno+0x8>)
 8004da6:	6818      	ldr	r0, [r3, #0]
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	2000000c 	.word	0x2000000c

08004db0 <__libc_init_array>:
 8004db0:	b570      	push	{r4, r5, r6, lr}
 8004db2:	4d0d      	ldr	r5, [pc, #52]	; (8004de8 <__libc_init_array+0x38>)
 8004db4:	4c0d      	ldr	r4, [pc, #52]	; (8004dec <__libc_init_array+0x3c>)
 8004db6:	1b64      	subs	r4, r4, r5
 8004db8:	10a4      	asrs	r4, r4, #2
 8004dba:	2600      	movs	r6, #0
 8004dbc:	42a6      	cmp	r6, r4
 8004dbe:	d109      	bne.n	8004dd4 <__libc_init_array+0x24>
 8004dc0:	4d0b      	ldr	r5, [pc, #44]	; (8004df0 <__libc_init_array+0x40>)
 8004dc2:	4c0c      	ldr	r4, [pc, #48]	; (8004df4 <__libc_init_array+0x44>)
 8004dc4:	f000 f8bc 	bl	8004f40 <_init>
 8004dc8:	1b64      	subs	r4, r4, r5
 8004dca:	10a4      	asrs	r4, r4, #2
 8004dcc:	2600      	movs	r6, #0
 8004dce:	42a6      	cmp	r6, r4
 8004dd0:	d105      	bne.n	8004dde <__libc_init_array+0x2e>
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
 8004dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dd8:	4798      	blx	r3
 8004dda:	3601      	adds	r6, #1
 8004ddc:	e7ee      	b.n	8004dbc <__libc_init_array+0xc>
 8004dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de2:	4798      	blx	r3
 8004de4:	3601      	adds	r6, #1
 8004de6:	e7f2      	b.n	8004dce <__libc_init_array+0x1e>
 8004de8:	08005094 	.word	0x08005094
 8004dec:	08005094 	.word	0x08005094
 8004df0:	08005094 	.word	0x08005094
 8004df4:	08005098 	.word	0x08005098

08004df8 <memcpy>:
 8004df8:	440a      	add	r2, r1
 8004dfa:	4291      	cmp	r1, r2
 8004dfc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004e00:	d100      	bne.n	8004e04 <memcpy+0xc>
 8004e02:	4770      	bx	lr
 8004e04:	b510      	push	{r4, lr}
 8004e06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e0e:	4291      	cmp	r1, r2
 8004e10:	d1f9      	bne.n	8004e06 <memcpy+0xe>
 8004e12:	bd10      	pop	{r4, pc}

08004e14 <memset>:
 8004e14:	4402      	add	r2, r0
 8004e16:	4603      	mov	r3, r0
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d100      	bne.n	8004e1e <memset+0xa>
 8004e1c:	4770      	bx	lr
 8004e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e22:	e7f9      	b.n	8004e18 <memset+0x4>

08004e24 <_strtol_l.isra.0>:
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e2a:	d001      	beq.n	8004e30 <_strtol_l.isra.0+0xc>
 8004e2c:	2b24      	cmp	r3, #36	; 0x24
 8004e2e:	d906      	bls.n	8004e3e <_strtol_l.isra.0+0x1a>
 8004e30:	f7ff ffb8 	bl	8004da4 <__errno>
 8004e34:	2316      	movs	r3, #22
 8004e36:	6003      	str	r3, [r0, #0]
 8004e38:	2000      	movs	r0, #0
 8004e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e3e:	4f3a      	ldr	r7, [pc, #232]	; (8004f28 <_strtol_l.isra.0+0x104>)
 8004e40:	468e      	mov	lr, r1
 8004e42:	4676      	mov	r6, lr
 8004e44:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004e48:	5de5      	ldrb	r5, [r4, r7]
 8004e4a:	f015 0508 	ands.w	r5, r5, #8
 8004e4e:	d1f8      	bne.n	8004e42 <_strtol_l.isra.0+0x1e>
 8004e50:	2c2d      	cmp	r4, #45	; 0x2d
 8004e52:	d134      	bne.n	8004ebe <_strtol_l.isra.0+0x9a>
 8004e54:	f89e 4000 	ldrb.w	r4, [lr]
 8004e58:	f04f 0801 	mov.w	r8, #1
 8004e5c:	f106 0e02 	add.w	lr, r6, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d05c      	beq.n	8004f1e <_strtol_l.isra.0+0xfa>
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d10c      	bne.n	8004e82 <_strtol_l.isra.0+0x5e>
 8004e68:	2c30      	cmp	r4, #48	; 0x30
 8004e6a:	d10a      	bne.n	8004e82 <_strtol_l.isra.0+0x5e>
 8004e6c:	f89e 4000 	ldrb.w	r4, [lr]
 8004e70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004e74:	2c58      	cmp	r4, #88	; 0x58
 8004e76:	d14d      	bne.n	8004f14 <_strtol_l.isra.0+0xf0>
 8004e78:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004e7c:	2310      	movs	r3, #16
 8004e7e:	f10e 0e02 	add.w	lr, lr, #2
 8004e82:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004e86:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8004e8a:	2600      	movs	r6, #0
 8004e8c:	fbbc f9f3 	udiv	r9, ip, r3
 8004e90:	4635      	mov	r5, r6
 8004e92:	fb03 ca19 	mls	sl, r3, r9, ip
 8004e96:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004e9a:	2f09      	cmp	r7, #9
 8004e9c:	d818      	bhi.n	8004ed0 <_strtol_l.isra.0+0xac>
 8004e9e:	463c      	mov	r4, r7
 8004ea0:	42a3      	cmp	r3, r4
 8004ea2:	dd24      	ble.n	8004eee <_strtol_l.isra.0+0xca>
 8004ea4:	2e00      	cmp	r6, #0
 8004ea6:	db1f      	blt.n	8004ee8 <_strtol_l.isra.0+0xc4>
 8004ea8:	45a9      	cmp	r9, r5
 8004eaa:	d31d      	bcc.n	8004ee8 <_strtol_l.isra.0+0xc4>
 8004eac:	d101      	bne.n	8004eb2 <_strtol_l.isra.0+0x8e>
 8004eae:	45a2      	cmp	sl, r4
 8004eb0:	db1a      	blt.n	8004ee8 <_strtol_l.isra.0+0xc4>
 8004eb2:	fb05 4503 	mla	r5, r5, r3, r4
 8004eb6:	2601      	movs	r6, #1
 8004eb8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004ebc:	e7eb      	b.n	8004e96 <_strtol_l.isra.0+0x72>
 8004ebe:	2c2b      	cmp	r4, #43	; 0x2b
 8004ec0:	bf08      	it	eq
 8004ec2:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004ec6:	46a8      	mov	r8, r5
 8004ec8:	bf08      	it	eq
 8004eca:	f106 0e02 	addeq.w	lr, r6, #2
 8004ece:	e7c7      	b.n	8004e60 <_strtol_l.isra.0+0x3c>
 8004ed0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004ed4:	2f19      	cmp	r7, #25
 8004ed6:	d801      	bhi.n	8004edc <_strtol_l.isra.0+0xb8>
 8004ed8:	3c37      	subs	r4, #55	; 0x37
 8004eda:	e7e1      	b.n	8004ea0 <_strtol_l.isra.0+0x7c>
 8004edc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004ee0:	2f19      	cmp	r7, #25
 8004ee2:	d804      	bhi.n	8004eee <_strtol_l.isra.0+0xca>
 8004ee4:	3c57      	subs	r4, #87	; 0x57
 8004ee6:	e7db      	b.n	8004ea0 <_strtol_l.isra.0+0x7c>
 8004ee8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8004eec:	e7e4      	b.n	8004eb8 <_strtol_l.isra.0+0x94>
 8004eee:	2e00      	cmp	r6, #0
 8004ef0:	da05      	bge.n	8004efe <_strtol_l.isra.0+0xda>
 8004ef2:	2322      	movs	r3, #34	; 0x22
 8004ef4:	6003      	str	r3, [r0, #0]
 8004ef6:	4665      	mov	r5, ip
 8004ef8:	b942      	cbnz	r2, 8004f0c <_strtol_l.isra.0+0xe8>
 8004efa:	4628      	mov	r0, r5
 8004efc:	e79d      	b.n	8004e3a <_strtol_l.isra.0+0x16>
 8004efe:	f1b8 0f00 	cmp.w	r8, #0
 8004f02:	d000      	beq.n	8004f06 <_strtol_l.isra.0+0xe2>
 8004f04:	426d      	negs	r5, r5
 8004f06:	2a00      	cmp	r2, #0
 8004f08:	d0f7      	beq.n	8004efa <_strtol_l.isra.0+0xd6>
 8004f0a:	b10e      	cbz	r6, 8004f10 <_strtol_l.isra.0+0xec>
 8004f0c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8004f10:	6011      	str	r1, [r2, #0]
 8004f12:	e7f2      	b.n	8004efa <_strtol_l.isra.0+0xd6>
 8004f14:	2430      	movs	r4, #48	; 0x30
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1b3      	bne.n	8004e82 <_strtol_l.isra.0+0x5e>
 8004f1a:	2308      	movs	r3, #8
 8004f1c:	e7b1      	b.n	8004e82 <_strtol_l.isra.0+0x5e>
 8004f1e:	2c30      	cmp	r4, #48	; 0x30
 8004f20:	d0a4      	beq.n	8004e6c <_strtol_l.isra.0+0x48>
 8004f22:	230a      	movs	r3, #10
 8004f24:	e7ad      	b.n	8004e82 <_strtol_l.isra.0+0x5e>
 8004f26:	bf00      	nop
 8004f28:	08004f91 	.word	0x08004f91

08004f2c <strtol>:
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	460a      	mov	r2, r1
 8004f30:	4601      	mov	r1, r0
 8004f32:	4802      	ldr	r0, [pc, #8]	; (8004f3c <strtol+0x10>)
 8004f34:	6800      	ldr	r0, [r0, #0]
 8004f36:	f7ff bf75 	b.w	8004e24 <_strtol_l.isra.0>
 8004f3a:	bf00      	nop
 8004f3c:	2000000c 	.word	0x2000000c

08004f40 <_init>:
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f42:	bf00      	nop
 8004f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f46:	bc08      	pop	{r3}
 8004f48:	469e      	mov	lr, r3
 8004f4a:	4770      	bx	lr

08004f4c <_fini>:
 8004f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4e:	bf00      	nop
 8004f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f52:	bc08      	pop	{r3}
 8004f54:	469e      	mov	lr, r3
 8004f56:	4770      	bx	lr
